{"version":3,"file":"static/js/227.c36389ba.chunk.js","mappings":"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","sources":["assets/breakpoints/device.js","components/DiagramTab/Chart/Chart.styled.js","helpers/numberSpace.js","components/DiagramTab/Chart/Chart.jsx","hooks/useElementWidth.js","components/DiagramTab/FormFilter/FormFilter.styled.js","components/DiagramTab/FormFilter/FormFilter.jsx","components/DiagramTab/Table/Table.styled.js","components/DiagramTab/Table/Table.jsx","components/DiagramTab/DiagramTab.styled.js","components/DiagramTab/DiagramTab.jsx"],"sourcesContent":["const device = {\n  mobile: `screen and (min-width: 480px)`,\n  tablet: `screen and (min-width: 768px)`,\n  desktop: `screen and (min-width: 1280px)`,\n  maxTablet: `screen and (max-width: 767px)`,\n};\n\nexport default device;\n","import styled from 'styled-components';\n\nexport const ChartContainer = styled.div`\n  position: relative;\n  margin-bottom: 32px;\n`;\nexport const DoughnutBalance = styled.p`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  margin: 0;\n  font-weight: 700;\n  font-size: 18px;\n  line-height: 1.5;\n`;\n","export const numberSpace = number => {\n  if (!number) return '0.00';\n  const units = number.toFixed(2).toString().slice(-6);\n  const thousands = number.toFixed(2).toString().slice(-9, -6);\n  const millions = number.toFixed(2).toString().slice(-12, -9);\n  const billions = number.toFixed(2).toString().slice(-15, -12);\n  const trillions = number.toFixed(2).toString().slice(-18, -15);\n\n  if (trillions)\n    return `${trillions} ${billions} ${millions} ${thousands} ${units}`;\n  if (billions) return `${billions} ${millions} ${thousands} ${units}`;\n  if (millions) return `${millions} ${thousands} ${units}`;\n  if (thousands) return `${thousands} ${units}`;\n\n  return units;\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport { useElementWidth } from 'hooks/useElementWidth';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport { Doughnut } from 'react-chartjs-2';\nimport theme from '../../../theme/theme';\nimport { ChartContainer, DoughnutBalance } from './Chart.styled';\nimport { numberSpace } from 'helpers';\nimport Media from 'react-media';\n\nChartJS.register(ArcElement, Tooltip);\n\nconst Chart = ({ balance, expenses }) => {\n  const [ref, width] = useElementWidth();\n\n  let data;\n\n  useEffect(() => {\n    for (let id in ChartJS.instances) {\n      ChartJS.instances[id].resize(width, width);\n    }\n  }, [ref, width]);\n\n  if (expenses.length > 0) {\n    data = {\n      labels: expenses.map(trans => trans.categoryName[0]),\n      datasets: [\n        {\n          // label: 'Doughnut Chart',\n          data: expenses.map(trans => trans.amount),\n          backgroundColor: theme.doughnutColors,\n          borderColor: theme.doughnutColors,\n          borderWidth: 1,\n        },\n      ],\n    };\n  } else {\n    data = {\n      labels: ['no data'],\n      datasets: [\n        {\n          data: [1],\n          backgroundColor: '#ababab',\n          borderColor: theme.colors.accentSecondary,\n          borderWidth: 1,\n        },\n      ],\n    };\n  }\n  const options = { cutout: '70%' };\n\n  return (\n    <Media\n      queries={{\n        small: '(max-width: 767px)',\n        medium: '(min-width: 768px) and (max-width: 1279px)',\n        large: '(min-width: 1280px)',\n      }}\n    >\n      {matches => (\n        <>\n          {(matches.small || matches.medium || matches.large) && (\n            <ChartContainer ref={ref}>\n              <Doughnut\n                data={data}\n                options={options}\n                updateMode=\"resize\"\n                redraw={true}\n              />\n              <DoughnutBalance>\n                {'\\u20B4'} {numberSpace(balance)}\n              </DoughnutBalance>\n            </ChartContainer>\n          )}\n        </>\n      )}\n    </Media>\n  );\n};\nexport default Chart;\n","import { useEffect, useRef, useState } from 'react';\n\nexport const useElementWidth = () => {\n  const ref = useRef();\n  const [width, setWidth] = useState(null);\n\n  const observer = useRef(\n    new ResizeObserver(entries => {\n      const { width } = entries[0].contentRect;\n      setWidth(width);\n    })\n  );\n\n  useEffect(() => {\n    observer.current.observe(ref.current);\n  }, [ref, observer, width]);\n\n  return [ref, width];\n};\n","import styled from 'styled-components';\nimport { Field, Form } from 'formik';\nimport theme from 'theme/theme';\nimport arrowDown from '../../../images/arrow-down.png';\nimport device from 'assets/breakpoints/device';\n\nexport const FormEl = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n  gap: 20px;\n\n  @media ${device.tablet} {\n    flex-direction: row;\n  }\n`;\n\nexport const InpWrapper = styled.div`\n  position: relative;\n\n  @media ${device.tablet} {\n    flex-basis: 50%;\n  }\n\n  &::after {\n    content: '';\n    z-index: 2;\n    position: absolute;\n    display: block;\n    top: 50%;\n    transform: translate(0, -50%);\n    right: 21px;\n    width: 18px;\n    height: 9px;\n    /* background-color: blue; */\n    background: url(${arrowDown});\n    background-repeat: no-repeat;\n    background-position: center;\n    background-size: cover;\n    pointer-events: none;\n  }\n`;\n\nexport const Select = styled.select`\n  width: 100%;\n  height: 50px;\n  padding: 12px 20px;\n  border: 1px solid ${theme.colors.primaryTextColor};\n  border-radius: 30px;\n  background-color: transparent;\n  /* gap: 20px; */\n  -moz-appearance: none;\n  -webkit-appearance: none;\n  display: block;\n`;\n","import React, { useState } from 'react';\nimport { Field, Form, Formik } from 'formik';\nimport { FormEl, Select, InpWrapper } from './FormFilter.styled';\nimport { useEffect } from 'react';\n\nconst FormFilter = ({ onFilterChange, actDates, dates }) => {\n  const [month, setMonth] = useState(new Date().getMonth() + 1);\n  const [year, setYear] = useState(new Date().getFullYear());\n  const [actYears, setActYears] = useState([]);\n\n  useEffect(() => {\n    const actYears = actDates.map(el => el.year) ?? [];\n    setActYears(actYears);\n  }, [actDates]);\n\n  const checkActMonth = month => {\n    return !!!actDates.find(\n      elem => elem.year === +dates.year && elem.monthes.includes(+month)\n    );\n  };\n\n  return (\n    <div>\n      <Formik\n        initialValues={{\n          month: 'month',\n          year: 'year',\n        }}\n      >\n        <FormEl>\n          <InpWrapper>\n            <Field\n              as={Select}\n              name=\"month\"\n              onChange={e => {\n                setMonth(e.target.value);\n                onFilterChange({ month: +e.target.value });\n              }}\n              value={month}\n            >\n              <option value=\"01\" disabled={checkActMonth(1)}>\n                January\n              </option>\n              <option value=\"02\" disabled={checkActMonth(2)}>\n                February\n              </option>\n              <option value=\"03\" disabled={checkActMonth(3)}>\n                March\n              </option>\n              <option value=\"04\" disabled={checkActMonth(4)}>\n                April\n              </option>\n              <option value=\"05\" disabled={checkActMonth(5)}>\n                May\n              </option>\n              <option value=\"06\" disabled={checkActMonth(6)}>\n                June\n              </option>\n              <option value=\"07\" disabled={checkActMonth(7)}>\n                July\n              </option>\n              <option value=\"08\" disabled={checkActMonth(8)}>\n                August\n              </option>\n              <option value=\"09\" disabled={checkActMonth(9)}>\n                September\n              </option>\n              <option value=\"10\" disabled={checkActMonth(10)}>\n                October\n              </option>\n              <option value=\"11\" disabled={checkActMonth(11)}>\n                November\n              </option>\n              <option value=\"12\" disabled={checkActMonth(12)}>\n                December\n              </option>\n            </Field>\n          </InpWrapper>\n          <InpWrapper>\n            <Field\n              as={Select}\n              name=\"year\"\n              value={year}\n              onChange={e => {\n                setYear(e.target.value);\n                onFilterChange({ year: +e.target.value });\n              }}\n            >\n              {actYears?.length ? (\n                actYears.map(year => (\n                  <option key={year} value={year}>\n                    {year}\n                  </option>\n                ))\n              ) : (\n                <option key={year} value={year} disabled={true}>\n                  {year}\n                </option>\n              )}\n            </Field>\n          </InpWrapper>\n        </FormEl>\n      </Formik>\n    </div>\n  );\n};\n\nexport default FormFilter;\n","import styled from 'styled-components';\nimport theme from 'theme/theme';\n\nexport const TableHeader = styled.div`\n  height: 50px;\n  display: flex;\n  justify-content: space-between;\n  background-color: ${theme.colors.secondaryBg};\n  border-radius: 30px;\n`;\nexport const TableHeaderItem = styled.div`\n  padding: 15px 20px;\n  font-weight: 700;\n  font-size: 18px;\n  line-height: 1.5;\n  /* display: flex;\n  justify-content: space-between; */\n`;\nexport const Transaction = styled.div`\n  height: 54px;\n  padding: 15px 20px;\n  display: flex;\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 1.13;\n  align-items: center;\n  border-bottom: 1px solid #dcdcdf;\n  box-shadow: 0px 1px 0px rgba(255, 255, 255, 0.6);\n`;\n\nexport const IconCol = styled.span`\n  height: 24px;\n  width: 24px;\n  margin-right: 16px;\n  background-color: ${props => (props.color ? props.color : 'grey')};\n  border-radius: 2px;\n`;\n\nexport const ItemCategory = styled.span`\n  margin-right: auto;\n`;\n\nexport const ItemAmount = styled.span``;\n\nexport const Totals = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 15px 20px;\n\n  font-weight: 700;\n  font-size: 16px;\n  line-height: 1.5;\n`;\n\nexport const TotalCategory = styled.span``;\n\nexport const TotalAmountExp = styled.span`\n  color: ${theme.colors.expenseColor};\n`;\nexport const TotalAmountInc = styled.span`\n  color: ${theme.colors.accentPrimary};\n`;\n","import React from 'react';\nimport {\n  TableHeader,\n  TableHeaderItem,\n  Transaction,\n  IconCol,\n  ItemCategory,\n  ItemAmount,\n  Totals,\n  TotalCategory,\n  TotalAmountExp,\n  TotalAmountInc,\n} from './Table.styled';\nimport { numberSpace } from 'helpers';\nimport theme from 'theme/theme';\n\nconst Table = ({ statistics }) => {\n  const transactions = [];\n  for (let i = 0; i < statistics.expenses.length; i += 1) {\n    transactions.push(\n      <Transaction key={statistics.expenses[i].categoryId[0]}>\n        <IconCol\n          color={theme.doughnutColors[i] ?? theme.doughnutColors[i - 38]}\n        />\n        <ItemCategory>{statistics.expenses[i].categoryName[0]}</ItemCategory>\n        <ItemAmount>{numberSpace(statistics.expenses[i].amount)}</ItemAmount>\n      </Transaction>\n    );\n  }\n\n  return (\n    <div>\n      <TableHeader>\n        <TableHeaderItem>Category</TableHeaderItem>\n        <TableHeaderItem>Sum</TableHeaderItem>\n      </TableHeader>\n      {transactions}\n      <Totals>\n        <TotalCategory>Expenses:</TotalCategory>\n        <TotalAmountExp>{numberSpace(statistics.totalExpenses)}</TotalAmountExp>\n      </Totals>\n      <Totals>\n        <TotalCategory>Income:</TotalCategory>\n        <TotalAmountInc>{numberSpace(statistics.totalIncome)}</TotalAmountInc>\n      </Totals>\n    </div>\n  );\n};\nexport default Table;\n","import styled from 'styled-components';\nimport theme from 'theme/theme';\nimport device from 'assets/breakpoints/device';\n\nexport const Section = styled.section`\n  display: flex;\n  flex-direction: column;\n\n  @media ${device.tablet} {\n    flex-direction: row;\n    gap: 32px;\n  }\n  @media ${device.desktop} {\n    margin-top: 32px;\n    margin-left: 69px;\n    flex-basis: 715px;\n  }\n`;\n\nexport const Column = styled.div`\n  &:nth-child(1) {\n    @media ${device.tablet} {\n      flex-basis: 45%;\n    }\n    @media ${device.desktop} {\n      flex-basis: 35%;\n    }\n  }\n  &:nth-child(2) {\n    flex-grow: 1;\n  }\n`;\n\nexport const Title = styled.h1`\n  margin-bottom: 8px;\n  font-family: ${theme.fontFamily.poppins};\n  font-weight: 400;\n  font-size: 30px;\n  line-height: 1.5;\n\n  @media ${device.desktop} {\n    margin-left: 15px;\n  }\n`;\n","import React from 'react';\nimport Chart from './Chart/Chart';\nimport FormFilter from './FormFilter/FormFilter';\nimport Table from './Table/Table';\nimport { Section, Title, Column } from './DiagramTab.styled';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport API from 'services/api/api';\nimport { useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\n\nconst DiagramTab = () => {\n  const [filter, setFilter] = useState({\n    month: new Date().getMonth() + 1,\n    year: new Date().getFullYear(),\n  });\n\n  const [statistics, setStatistics] = useState({\n    expenses: [],\n    totalExpenses: 0,\n    totalIncome: 0,\n    actDates: [],\n  });\n  const balance = useSelector(state => state.auth.user.balance);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const { data } = await API.getStatistics(filter);\n        setStatistics(data);\n      } catch (error) {\n        toast.error(\"can't connect\");\n      }\n    })();\n  }, [filter]);\n\n  const onFilterChange = value => {\n    setFilter(prevState => ({ ...prevState, ...value }));\n  };\n\n  return (\n    <Section>\n      <Column>\n        <Title>Statistics</Title>\n        <Chart balance={balance} expenses={statistics.expenses} />\n      </Column>\n      <Column>\n        <FormFilter\n          onFilterChange={onFilterChange}\n          actDates={statistics.actDates}\n          dates={filter}\n        />\n        <Table statistics={statistics} />\n      </Column>\n    </Section>\n  );\n};\nexport default DiagramTab;\n"],"names":["mobile","tablet","desktop","maxTablet","ChartContainer","styled","DoughnutBalance","numberSpace","number","units","toFixed","toString","slice","thousands","millions","billions","trillions","ChartJS","ArcElement","Tooltip","data","balance","expenses","ref","useRef","useState","width","setWidth","observer","ResizeObserver","entries","contentRect","useEffect","current","observe","useElementWidth","id","resize","length","labels","map","trans","categoryName","datasets","amount","backgroundColor","theme","borderColor","borderWidth","options","cutout","queries","small","medium","large","matches","updateMode","redraw","FormEl","Form","device","InpWrapper","arrowDown","Select","onFilterChange","actDates","dates","Date","getMonth","month","setMonth","getFullYear","year","setYear","actYears","setActYears","el","checkActMonth","find","elem","monthes","includes","initialValues","as","name","onChange","e","target","value","disabled","TableHeader","TableHeaderItem","Transaction","IconCol","props","color","ItemCategory","ItemAmount","Totals","TotalCategory","TotalAmountExp","TotalAmountInc","statistics","transactions","i","push","categoryId","totalExpenses","totalIncome","Section","Column","Title","filter","setFilter","setStatistics","useSelector","state","auth","user","API","toast","prevState"],"sourceRoot":""}