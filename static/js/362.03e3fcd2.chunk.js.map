{"version":3,"file":"static/js/362.03e3fcd2.chunk.js","mappings":"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","sources":["../node_modules/react-table/src/publicUtils.js","../node_modules/react-table/src/utils.js","../node_modules/react-table/src/makeDefaultPluginHooks.js","../node_modules/react-table/src/hooks/useColumnVisibility.js","../node_modules/react-table/src/hooks/useTable.js","../node_modules/react-table/src/plugin-hooks/useExpanded.js","../node_modules/react-table/src/filterTypes.js","../node_modules/react-table/src/plugin-hooks/useFilters.js","../node_modules/react-table/src/plugin-hooks/useGlobalFilter.js","../node_modules/react-table/src/aggregations.js","../node_modules/react-table/src/plugin-hooks/useGroupBy.js","../node_modules/react-table/src/sortTypes.js","../node_modules/react-table/src/plugin-hooks/useSortBy.js","../node_modules/react-table/src/plugin-hooks/usePagination.js","../node_modules/react-table/src/plugin-hooks/_UNSTABLE_usePivotColumns.js","../node_modules/react-table/src/plugin-hooks/useRowSelect.js","../node_modules/react-table/src/plugin-hooks/useRowState.js","../node_modules/react-table/src/plugin-hooks/useColumnOrder.js","../node_modules/react-table/src/plugin-hooks/useResizeColumns.js","../node_modules/react-table/src/plugin-hooks/useAbsoluteLayout.js","../node_modules/react-table/src/plugin-hooks/useBlockLayout.js","../node_modules/react-table/src/plugin-hooks/useFlexLayout.js","../node_modules/react-table/src/plugin-hooks/useGridLayout.js","../node_modules/react-table/index.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import React from 'react'\n\nlet renderErr = 'Renderer Error ☝️'\n\nexport const actions = {\n  init: 'init',\n}\n\nexport const defaultRenderer = ({ value = '' }) => value;\nexport const emptyRenderer = () => <>&nbsp;</>;\n\nexport const defaultColumn = {\n  Cell: defaultRenderer,\n  width: 150,\n  minWidth: 0,\n  maxWidth: Number.MAX_SAFE_INTEGER,\n}\n\nfunction mergeProps(...propList) {\n  return propList.reduce((props, next) => {\n    const { style, className, ...rest } = next\n\n    props = {\n      ...props,\n      ...rest,\n    }\n\n    if (style) {\n      props.style = props.style\n        ? { ...(props.style || {}), ...(style || {}) }\n        : style\n    }\n\n    if (className) {\n      props.className = props.className\n        ? props.className + ' ' + className\n        : className\n    }\n\n    if (props.className === '') {\n      delete props.className\n    }\n\n    return props\n  }, {})\n}\n\nfunction handlePropGetter(prevProps, userProps, meta) {\n  // Handle a lambda, pass it the previous props\n  if (typeof userProps === 'function') {\n    return handlePropGetter({}, userProps(prevProps, meta))\n  }\n\n  // Handle an array, merge each item as separate props\n  if (Array.isArray(userProps)) {\n    return mergeProps(prevProps, ...userProps)\n  }\n\n  // Handle an object by default, merge the two objects\n  return mergeProps(prevProps, userProps)\n}\n\nexport const makePropGetter = (hooks, meta = {}) => {\n  return (userProps = {}) =>\n    [...hooks, userProps].reduce(\n      (prev, next) =>\n        handlePropGetter(prev, next, {\n          ...meta,\n          userProps,\n        }),\n      {}\n    )\n}\n\nexport const reduceHooks = (hooks, initial, meta = {}, allowUndefined) =>\n  hooks.reduce((prev, next) => {\n    const nextValue = next(prev, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (!allowUndefined && typeof nextValue === 'undefined') {\n        console.info(next)\n        throw new Error(\n          'React Table: A reducer hook ☝️ just returned undefined! This is not allowed.'\n        )\n      }\n    }\n    return nextValue\n  }, initial)\n\nexport const loopHooks = (hooks, context, meta = {}) =>\n  hooks.forEach(hook => {\n    const nextValue = hook(context, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof nextValue !== 'undefined') {\n        console.info(hook, nextValue)\n        throw new Error(\n          'React Table: A loop-type hook ☝️ just returned a value! This is not allowed.'\n        )\n      }\n    }\n  })\n\nexport function ensurePluginOrder(plugins, befores, pluginName, afters) {\n  if (process.env.NODE_ENV !== 'production' && afters) {\n    throw new Error(\n      `Defining plugins in the \"after\" section of ensurePluginOrder is no longer supported (see plugin ${pluginName})`\n    )\n  }\n  const pluginIndex = plugins.findIndex(\n    plugin => plugin.pluginName === pluginName\n  )\n\n  if (pluginIndex === -1) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`The plugin \"${pluginName}\" was not found in the plugin list!\nThis usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:\n\n  ${pluginName}.pluginName = '${pluginName}'\n`)\n    }\n  }\n\n  befores.forEach(before => {\n    const beforeIndex = plugins.findIndex(\n      plugin => plugin.pluginName === before\n    )\n    if (beforeIndex > -1 && beforeIndex > pluginIndex) {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\n          `React Table: The ${pluginName} plugin hook must be placed after the ${before} plugin hook!`\n        )\n      }\n    }\n  })\n}\n\nexport function functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater\n}\n\nexport function useGetLatest(obj) {\n  const ref = React.useRef()\n  ref.current = obj\n\n  return React.useCallback(() => ref.current, [])\n}\n\n// SSR has issues with useLayoutEffect still, so use useEffect during SSR\nexport const safeUseLayoutEffect =\n  typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nexport function useMountedLayoutEffect(fn, deps) {\n  const mountedRef = React.useRef(false)\n\n  safeUseLayoutEffect(() => {\n    if (mountedRef.current) {\n      fn()\n    }\n    mountedRef.current = true\n    // eslint-disable-next-line\n  }, deps)\n}\n\nexport function useAsyncDebounce(defaultFn, defaultWait = 0) {\n  const debounceRef = React.useRef({})\n\n  const getDefaultFn = useGetLatest(defaultFn)\n  const getDefaultWait = useGetLatest(defaultWait)\n\n  return React.useCallback(\n    async (...args) => {\n      if (!debounceRef.current.promise) {\n        debounceRef.current.promise = new Promise((resolve, reject) => {\n          debounceRef.current.resolve = resolve\n          debounceRef.current.reject = reject\n        })\n      }\n\n      if (debounceRef.current.timeout) {\n        clearTimeout(debounceRef.current.timeout)\n      }\n\n      debounceRef.current.timeout = setTimeout(async () => {\n        delete debounceRef.current.timeout\n        try {\n          debounceRef.current.resolve(await getDefaultFn()(...args))\n        } catch (err) {\n          debounceRef.current.reject(err)\n        } finally {\n          delete debounceRef.current.promise\n        }\n      }, getDefaultWait())\n\n      return debounceRef.current.promise\n    },\n    [getDefaultFn, getDefaultWait]\n  )\n}\n\nexport function makeRenderer(instance, column, meta = {}) {\n  return (type, userProps = {}) => {\n    const Comp = typeof type === 'string' ? column[type] : type\n\n    if (typeof Comp === 'undefined') {\n      console.info(column)\n      throw new Error(renderErr)\n    }\n\n    return flexRender(Comp, { ...instance, column, ...meta, ...userProps })\n  }\n}\n\nexport function flexRender(Comp, props) {\n  return isReactComponent(Comp) ? <Comp {...props} /> : Comp\n}\n\nfunction isReactComponent(component) {\n  return (\n    isClassComponent(component) ||\n    typeof component === 'function' ||\n    isExoticComponent(component)\n  )\n}\n\nfunction isClassComponent(component) {\n  return (\n    typeof component === 'function' &&\n    (() => {\n      const proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isExoticComponent(component) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n","import { defaultColumn, emptyRenderer } from './publicUtils'\n\n// Find the depth of the columns\nexport function findMaxDepth(columns, depth = 0) {\n  return columns.reduce((prev, curr) => {\n    if (curr.columns) {\n      return Math.max(prev, findMaxDepth(curr.columns, depth + 1))\n    }\n    return depth\n  }, 0)\n}\n\n// Build the visible columns, headers and flat column list\nexport function linkColumnStructure(columns, parent, depth = 0) {\n  return columns.map(column => {\n    column = {\n      ...column,\n      parent,\n      depth,\n    }\n\n    assignColumnAccessor(column)\n\n    if (column.columns) {\n      column.columns = linkColumnStructure(column.columns, column, depth + 1)\n    }\n    return column\n  })\n}\n\nexport function flattenColumns(columns) {\n  return flattenBy(columns, 'columns')\n}\n\nexport function assignColumnAccessor(column) {\n  // First check for string accessor\n  let { id, accessor, Header } = column\n\n  if (typeof accessor === 'string') {\n    id = id || accessor\n    const accessorPath = accessor.split('.')\n    accessor = row => getBy(row, accessorPath)\n  }\n\n  if (!id && typeof Header === 'string' && Header) {\n    id = Header\n  }\n\n  if (!id && column.columns) {\n    console.error(column)\n    throw new Error('A column ID (or unique \"Header\" value) is required!')\n  }\n\n  if (!id) {\n    console.error(column)\n    throw new Error('A column ID (or string accessor) is required!')\n  }\n\n  Object.assign(column, {\n    id,\n    accessor,\n  })\n\n  return column\n}\n\nexport function decorateColumn(column, userDefaultColumn) {\n  if (!userDefaultColumn) {\n    throw new Error()\n  }\n  Object.assign(column, {\n    // Make sure there is a fallback header, just in case\n    Header: emptyRenderer,\n    Footer: emptyRenderer,\n    ...defaultColumn,\n    ...userDefaultColumn,\n    ...column,\n  })\n\n  Object.assign(column, {\n    originalWidth: column.width,\n  })\n\n  return column\n}\n\n// Build the header groups from the bottom up\nexport function makeHeaderGroups(\n  allColumns,\n  defaultColumn,\n  additionalHeaderProperties = () => ({})\n) {\n  const headerGroups = []\n\n  let scanColumns = allColumns\n\n  let uid = 0\n  const getUID = () => uid++\n\n  while (scanColumns.length) {\n    // The header group we are creating\n    const headerGroup = {\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const parentColumns = []\n\n    const hasParents = scanColumns.some(d => d.parent)\n\n    // Scan each column for parents\n    scanColumns.forEach(column => {\n      // What is the latest (last) parent column?\n      let latestParentColumn = [...parentColumns].reverse()[0]\n\n      let newParent\n\n      if (hasParents) {\n        // If the column has a parent, add it if necessary\n        if (column.parent) {\n          newParent = {\n            ...column.parent,\n            originalId: column.parent.id,\n            id: `${column.parent.id}_${getUID()}`,\n            headers: [column],\n            ...additionalHeaderProperties(column),\n          }\n        } else {\n          // If other columns have parents, we'll need to add a place holder if necessary\n          const originalId = `${column.id}_placeholder`\n          newParent = decorateColumn(\n            {\n              originalId,\n              id: `${column.id}_placeholder_${getUID()}`,\n              placeholderOf: column,\n              headers: [column],\n              ...additionalHeaderProperties(column),\n            },\n            defaultColumn\n          )\n        }\n\n        // If the resulting parent columns are the same, just add\n        // the column and increment the header span\n        if (\n          latestParentColumn &&\n          latestParentColumn.originalId === newParent.originalId\n        ) {\n          latestParentColumn.headers.push(column)\n        } else {\n          parentColumns.push(newParent)\n        }\n      }\n\n      headerGroup.headers.push(column)\n    })\n\n    headerGroups.push(headerGroup)\n\n    // Start scanning the parent columns\n    scanColumns = parentColumns\n  }\n\n  return headerGroups.reverse()\n}\n\nconst pathObjCache = new Map()\n\nexport function getBy(obj, path, def) {\n  if (!path) {\n    return obj\n  }\n  const cacheKey = typeof path === 'function' ? path : JSON.stringify(path)\n\n  const pathObj =\n    pathObjCache.get(cacheKey) ||\n    (() => {\n      const pathObj = makePathArray(path)\n      pathObjCache.set(cacheKey, pathObj)\n      return pathObj\n    })()\n\n  let val\n\n  try {\n    val = pathObj.reduce((cursor, pathPart) => cursor[pathPart], obj)\n  } catch (e) {\n    // continue regardless of error\n  }\n  return typeof val !== 'undefined' ? val : def\n}\n\nexport function getFirstDefined(...args) {\n  for (let i = 0; i < args.length; i += 1) {\n    if (typeof args[i] !== 'undefined') {\n      return args[i]\n    }\n  }\n}\n\nexport function getElementDimensions(element) {\n  const rect = element.getBoundingClientRect()\n  const style = window.getComputedStyle(element)\n  const margins = {\n    left: parseInt(style.marginLeft),\n    right: parseInt(style.marginRight),\n  }\n  const padding = {\n    left: parseInt(style.paddingLeft),\n    right: parseInt(style.paddingRight),\n  }\n  return {\n    left: Math.ceil(rect.left),\n    width: Math.ceil(rect.width),\n    outerWidth: Math.ceil(\n      rect.width + margins.left + margins.right + padding.left + padding.right\n    ),\n    marginLeft: margins.left,\n    marginRight: margins.right,\n    paddingLeft: padding.left,\n    paddingRight: padding.right,\n    scrollWidth: element.scrollWidth,\n  }\n}\n\nexport function isFunction(a) {\n  if (typeof a === 'function') {\n    return a\n  }\n}\n\nexport function flattenBy(arr, key) {\n  const flat = []\n\n  const recurse = arr => {\n    arr.forEach(d => {\n      if (!d[key]) {\n        flat.push(d)\n      } else {\n        recurse(d[key])\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function expandRows(\n  rows,\n  { manualExpandedKey, expanded, expandSubRows = true }\n) {\n  const expandedRows = []\n\n  const handleRow = (row, addToExpandedRows = true) => {\n    row.isExpanded =\n      (row.original && row.original[manualExpandedKey]) || expanded[row.id]\n\n    row.canExpand = row.subRows && !!row.subRows.length\n\n    if (addToExpandedRows) {\n      expandedRows.push(row)\n    }\n\n    if (row.subRows && row.subRows.length && row.isExpanded) {\n      row.subRows.forEach(row => handleRow(row, expandSubRows))\n    }\n  }\n\n  rows.forEach(row => handleRow(row))\n\n  return expandedRows\n}\n\nexport function getFilterMethod(filter, userFilterTypes, filterTypes) {\n  return (\n    isFunction(filter) ||\n    userFilterTypes[filter] ||\n    filterTypes[filter] ||\n    filterTypes.text\n  )\n}\n\nexport function shouldAutoRemoveFilter(autoRemove, value, column) {\n  return autoRemove ? autoRemove(value, column) : typeof value === 'undefined'\n}\n\nexport function unpreparedAccessWarning() {\n  throw new Error(\n    'React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.'\n  )\n}\n\nlet passiveSupported = null\nexport function passiveEventSupported() {\n  // memoize support to avoid adding multiple test events\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    window.addEventListener('test', null, options)\n    window.removeEventListener('test', null, options)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\n//\n\nconst reOpenBracket = /\\[/g\nconst reCloseBracket = /\\]/g\n\nfunction makePathArray(obj) {\n  return (\n    flattenDeep(obj)\n      // remove all periods in parts\n      .map(d => String(d).replace('.', '_'))\n      // join parts using period\n      .join('.')\n      // replace brackets with periods\n      .replace(reOpenBracket, '.')\n      .replace(reCloseBracket, '')\n      // split it back out on periods\n      .split('.')\n  )\n}\n\nfunction flattenDeep(arr, newArr = []) {\n  if (!Array.isArray(arr)) {\n    newArr.push(arr)\n  } else {\n    for (let i = 0; i < arr.length; i += 1) {\n      flattenDeep(arr[i], newArr)\n    }\n  }\n  return newArr\n}\n","const defaultGetTableProps = props => ({\n  role: 'table',\n  ...props,\n})\n\nconst defaultGetTableBodyProps = props => ({\n  role: 'rowgroup',\n  ...props,\n})\n\nconst defaultGetHeaderProps = (props, { column }) => ({\n  key: `header_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  role: 'columnheader',\n  ...props,\n})\n\nconst defaultGetFooterProps = (props, { column }) => ({\n  key: `footer_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  ...props,\n})\n\nconst defaultGetHeaderGroupProps = (props, { index }) => ({\n  key: `headerGroup_${index}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetFooterGroupProps = (props, { index }) => ({\n  key: `footerGroup_${index}`,\n  ...props,\n})\n\nconst defaultGetRowProps = (props, { row }) => ({\n  key: `row_${row.id}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetCellProps = (props, { cell }) => ({\n  key: `cell_${cell.row.id}_${cell.column.id}`,\n  role: 'cell',\n  ...props,\n})\n\nexport default function makeDefaultPluginHooks() {\n  return {\n    useOptions: [],\n    stateReducers: [],\n    useControlledState: [],\n    columns: [],\n    columnsDeps: [],\n    allColumns: [],\n    allColumnsDeps: [],\n    accessValue: [],\n    materializedColumns: [],\n    materializedColumnsDeps: [],\n    useInstanceAfterData: [],\n    visibleColumns: [],\n    visibleColumnsDeps: [],\n    headerGroups: [],\n    headerGroupsDeps: [],\n    useInstanceBeforeDimensions: [],\n    useInstance: [],\n    prepareRow: [],\n    getTableProps: [defaultGetTableProps],\n    getTableBodyProps: [defaultGetTableBodyProps],\n    getHeaderGroupProps: [defaultGetHeaderGroupProps],\n    getFooterGroupProps: [defaultGetFooterGroupProps],\n    getHeaderProps: [defaultGetHeaderProps],\n    getFooterProps: [defaultGetFooterProps],\n    getRowProps: [defaultGetRowProps],\n    getCellProps: [defaultGetCellProps],\n    useFinalInstance: [],\n  }\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useGetLatest,\n  makePropGetter,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nactions.resetHiddenColumns = 'resetHiddenColumns'\nactions.toggleHideColumn = 'toggleHideColumn'\nactions.setHiddenColumns = 'setHiddenColumns'\nactions.toggleHideAllColumns = 'toggleHideAllColumns'\n\nexport const useColumnVisibility = hooks => {\n  hooks.getToggleHiddenProps = [defaultGetToggleHiddenProps]\n  hooks.getToggleHideAllColumnsProps = [defaultGetToggleHideAllColumnsProps]\n\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n  hooks.headerGroupsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.hiddenColumns,\n  ])\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnVisibility.pluginName = 'useColumnVisibility'\n\nconst defaultGetToggleHiddenProps = (props, { column }) => [\n  props,\n  {\n    onChange: e => {\n      column.toggleHidden(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: column.isVisible,\n    title: 'Toggle Column Visible',\n  },\n]\n\nconst defaultGetToggleHideAllColumnsProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleHideAllColumns(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,\n    title: 'Toggle All Columns Hidden',\n    indeterminate:\n      !instance.allColumnsHidden && instance.state.hiddenColumns.length,\n  },\n]\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      hiddenColumns: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: instance.initialState.hiddenColumns || [],\n    }\n  }\n\n  if (action.type === actions.toggleHideColumn) {\n    const should =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.includes(action.columnId)\n\n    const hiddenColumns = should\n      ? [...state.hiddenColumns, action.columnId]\n      : state.hiddenColumns.filter(d => d !== action.columnId)\n\n    return {\n      ...state,\n      hiddenColumns,\n    }\n  }\n\n  if (action.type === actions.setHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: functionalUpdate(action.value, state.hiddenColumns),\n    }\n  }\n\n  if (action.type === actions.toggleHideAllColumns) {\n    const shouldAll =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.length\n\n    return {\n      ...state,\n      hiddenColumns: shouldAll ? instance.allColumns.map(d => d.id) : [],\n    }\n  }\n}\n\nfunction useInstanceBeforeDimensions(instance) {\n  const {\n    headers,\n    state: { hiddenColumns },\n  } = instance\n\n  const isMountedRef = React.useRef(false)\n\n  if (!isMountedRef.current) {\n  }\n\n  const handleColumn = (column, parentVisible) => {\n    column.isVisible = parentVisible && !hiddenColumns.includes(column.id)\n\n    let totalVisibleHeaderCount = 0\n\n    if (column.headers && column.headers.length) {\n      column.headers.forEach(\n        subColumn =>\n          (totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible))\n      )\n    } else {\n      totalVisibleHeaderCount = column.isVisible ? 1 : 0\n    }\n\n    column.totalVisibleHeaderCount = totalVisibleHeaderCount\n\n    return totalVisibleHeaderCount\n  }\n\n  let totalVisibleHeaderCount = 0\n\n  headers.forEach(\n    subHeader => (totalVisibleHeaderCount += handleColumn(subHeader, true))\n  )\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    flatHeaders,\n    dispatch,\n    allColumns,\n    getHooks,\n    state: { hiddenColumns },\n    autoResetHiddenColumns = true,\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  const allColumnsHidden = allColumns.length === hiddenColumns.length\n\n  const toggleHideColumn = React.useCallback(\n    (columnId, value) =>\n      dispatch({ type: actions.toggleHideColumn, columnId, value }),\n    [dispatch]\n  )\n\n  const setHiddenColumns = React.useCallback(\n    value => dispatch({ type: actions.setHiddenColumns, value }),\n    [dispatch]\n  )\n\n  const toggleHideAllColumns = React.useCallback(\n    value => dispatch({ type: actions.toggleHideAllColumns, value }),\n    [dispatch]\n  )\n\n  const getToggleHideAllColumnsProps = makePropGetter(\n    getHooks().getToggleHideAllColumnsProps,\n    { instance: getInstance() }\n  )\n\n  flatHeaders.forEach(column => {\n    column.toggleHidden = value => {\n      dispatch({\n        type: actions.toggleHideColumn,\n        columnId: column.id,\n        value,\n      })\n    }\n\n    column.getToggleHiddenProps = makePropGetter(\n      getHooks().getToggleHiddenProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n  })\n\n  const getAutoResetHiddenColumns = useGetLatest(autoResetHiddenColumns)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetHiddenColumns()) {\n      dispatch({ type: actions.resetHiddenColumns })\n    }\n  }, [dispatch, columns])\n\n  Object.assign(instance, {\n    allColumnsHidden,\n    toggleHideColumn,\n    setHiddenColumns,\n    toggleHideAllColumns,\n    getToggleHideAllColumnsProps,\n  })\n}\n","import React from 'react'\n\n//\n\nimport {\n  linkColumnStructure,\n  flattenColumns,\n  assignColumnAccessor,\n  unpreparedAccessWarning,\n  makeHeaderGroups,\n  decorateColumn,\n} from '../utils'\n\nimport {\n  useGetLatest,\n  reduceHooks,\n  actions,\n  loopHooks,\n  makePropGetter,\n  makeRenderer,\n} from '../publicUtils'\n\nimport makeDefaultPluginHooks from '../makeDefaultPluginHooks'\n\nimport { useColumnVisibility } from './useColumnVisibility'\n\nconst defaultInitialState = {}\nconst defaultColumnInstance = {}\nconst defaultReducer = (state, action, prevState) => state\nconst defaultGetSubRows = (row, index) => row.subRows || []\nconst defaultGetRowId = (row, index, parent) =>\n  `${parent ? [parent.id, index].join('.') : index}`\nconst defaultUseControlledState = d => d\n\nfunction applyDefaults(props) {\n  const {\n    initialState = defaultInitialState,\n    defaultColumn = defaultColumnInstance,\n    getSubRows = defaultGetSubRows,\n    getRowId = defaultGetRowId,\n    stateReducer = defaultReducer,\n    useControlledState = defaultUseControlledState,\n    ...rest\n  } = props\n\n  return {\n    ...rest,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  }\n}\n\nexport const useTable = (props, ...plugins) => {\n  // Apply default props\n  props = applyDefaults(props)\n\n  // Add core plugins\n  plugins = [useColumnVisibility, ...plugins]\n\n  // Create the table instance\n  let instanceRef = React.useRef({})\n\n  // Create a getter for the instance (helps avoid a lot of potential memory leaks)\n  const getInstance = useGetLatest(instanceRef.current)\n\n  // Assign the props, plugins and hooks to the instance\n  Object.assign(getInstance(), {\n    ...props,\n    plugins,\n    hooks: makeDefaultPluginHooks(),\n  })\n\n  // Allow plugins to register hooks as early as possible\n  plugins.filter(Boolean).forEach(plugin => {\n    plugin(getInstance().hooks)\n  })\n\n  // Consume all hooks and make a getter for them\n  const getHooks = useGetLatest(getInstance().hooks)\n  getInstance().getHooks = getHooks\n  delete getInstance().hooks\n\n  // Allow useOptions hooks to modify the options coming into the table\n  Object.assign(\n    getInstance(),\n    reduceHooks(getHooks().useOptions, applyDefaults(props))\n  )\n\n  const {\n    data,\n    columns: userColumns,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  } = getInstance()\n\n  // Setup user reducer ref\n  const getStateReducer = useGetLatest(stateReducer)\n\n  // Build the reducer\n  const reducer = React.useCallback(\n    (state, action) => {\n      // Detect invalid actions\n      if (!action.type) {\n        console.info({ action })\n        throw new Error('Unknown Action 👆')\n      }\n\n      // Reduce the state from all plugin reducers\n      return [\n        ...getHooks().stateReducers,\n        // Allow the user to add their own state reducer(s)\n        ...(Array.isArray(getStateReducer())\n          ? getStateReducer()\n          : [getStateReducer()]),\n      ].reduce(\n        (s, handler) => handler(s, action, state, getInstance()) || s,\n        state\n      )\n    },\n    [getHooks, getStateReducer, getInstance]\n  )\n\n  // Start the reducer\n  const [reducerState, dispatch] = React.useReducer(reducer, undefined, () =>\n    reducer(initialState, { type: actions.init })\n  )\n\n  // Allow the user to control the final state with hooks\n  const state = reduceHooks(\n    [...getHooks().useControlledState, useControlledState],\n    reducerState,\n    { instance: getInstance() }\n  )\n\n  Object.assign(getInstance(), {\n    state,\n    dispatch,\n  })\n\n  // Decorate All the columns\n  const columns = React.useMemo(\n    () =>\n      linkColumnStructure(\n        reduceHooks(getHooks().columns, userColumns, {\n          instance: getInstance(),\n        })\n      ),\n    [\n      getHooks,\n      getInstance,\n      userColumns,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().columnsDeps, [], { instance: getInstance() }),\n    ]\n  )\n  getInstance().columns = columns\n\n  // Get the flat list of all columns and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let allColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().allColumns, flattenColumns(columns), {\n        instance: getInstance(),\n      }).map(assignColumnAccessor),\n    [\n      columns,\n      getHooks,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().allColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().allColumns = allColumns\n\n  // Access the row model using initial columns\n  const [rows, flatRows, rowsById] = React.useMemo(() => {\n    let rows = []\n    let flatRows = []\n    const rowsById = {}\n\n    const allColumnsQueue = [...allColumns]\n\n    while (allColumnsQueue.length) {\n      const column = allColumnsQueue.shift()\n      accessRowsForColumn({\n        data,\n        rows,\n        flatRows,\n        rowsById,\n        column,\n        getRowId,\n        getSubRows,\n        accessValueHooks: getHooks().accessValue,\n        getInstance,\n      })\n    }\n\n    return [rows, flatRows, rowsById]\n  }, [allColumns, data, getRowId, getSubRows, getHooks, getInstance])\n\n  Object.assign(getInstance(), {\n    rows,\n    initialRows: [...rows],\n    flatRows,\n    rowsById,\n    // materializedColumns,\n  })\n\n  loopHooks(getHooks().useInstanceAfterData, getInstance())\n\n  // Get the flat list of all columns AFTER the rows\n  // have been access, and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let visibleColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().visibleColumns, allColumns, {\n        instance: getInstance(),\n      }).map(d => decorateColumn(d, defaultColumn)),\n    [\n      getHooks,\n      allColumns,\n      getInstance,\n      defaultColumn,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().visibleColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n\n  // Combine new visible columns with all columns\n  allColumns = React.useMemo(() => {\n    const columns = [...visibleColumns]\n\n    allColumns.forEach(column => {\n      if (!columns.find(d => d.id === column.id)) {\n        columns.push(column)\n      }\n    })\n\n    return columns\n  }, [allColumns, visibleColumns])\n  getInstance().allColumns = allColumns\n\n  if (process.env.NODE_ENV !== 'production') {\n    const duplicateColumns = allColumns.filter((column, i) => {\n      return allColumns.findIndex(d => d.id === column.id) !== i\n    })\n\n    if (duplicateColumns.length) {\n      console.info(allColumns)\n      throw new Error(\n        `Duplicate columns were found with ids: \"${duplicateColumns\n          .map(d => d.id)\n          .join(', ')}\" in the columns array above`\n      )\n    }\n  }\n\n  // Make the headerGroups\n  const headerGroups = React.useMemo(\n    () =>\n      reduceHooks(\n        getHooks().headerGroups,\n        makeHeaderGroups(visibleColumns, defaultColumn),\n        getInstance()\n      ),\n    [\n      getHooks,\n      visibleColumns,\n      defaultColumn,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().headerGroupsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().headerGroups = headerGroups\n\n  // Get the first level of headers\n  const headers = React.useMemo(\n    () => (headerGroups.length ? headerGroups[0].headers : []),\n    [headerGroups]\n  )\n  getInstance().headers = headers\n\n  // Provide a flat header list for utilities\n  getInstance().flatHeaders = headerGroups.reduce(\n    (all, headerGroup) => [...all, ...headerGroup.headers],\n    []\n  )\n\n  loopHooks(getHooks().useInstanceBeforeDimensions, getInstance())\n\n  // Filter columns down to visible ones\n  const visibleColumnsDep = visibleColumns\n    .filter(d => d.isVisible)\n    .map(d => d.id)\n    .sort()\n    .join('_')\n\n  visibleColumns = React.useMemo(\n    () => visibleColumns.filter(d => d.isVisible),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [visibleColumns, visibleColumnsDep]\n  )\n  getInstance().visibleColumns = visibleColumns\n\n  // Header Visibility is needed by this point\n  const [\n    totalColumnsMinWidth,\n    totalColumnsWidth,\n    totalColumnsMaxWidth,\n  ] = calculateHeaderWidths(headers)\n\n  getInstance().totalColumnsMinWidth = totalColumnsMinWidth\n  getInstance().totalColumnsWidth = totalColumnsWidth\n  getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth\n\n  loopHooks(getHooks().useInstance, getInstance())\n\n  // Each materialized header needs to be assigned a render function and other\n  // prop getter properties here.\n  ;[...getInstance().flatHeaders, ...getInstance().allColumns].forEach(\n    column => {\n      // Give columns/headers rendering power\n      column.render = makeRenderer(getInstance(), column)\n\n      // Give columns/headers a default getHeaderProps\n      column.getHeaderProps = makePropGetter(getHooks().getHeaderProps, {\n        instance: getInstance(),\n        column,\n      })\n\n      // Give columns/headers a default getFooterProps\n      column.getFooterProps = makePropGetter(getHooks().getFooterProps, {\n        instance: getInstance(),\n        column,\n      })\n    }\n  )\n\n  getInstance().headerGroups = React.useMemo(\n    () =>\n      headerGroups.filter((headerGroup, i) => {\n        // Filter out any headers and headerGroups that don't have visible columns\n        headerGroup.headers = headerGroup.headers.filter(column => {\n          const recurse = headers =>\n            headers.filter(column => {\n              if (column.headers) {\n                return recurse(column.headers)\n              }\n              return column.isVisible\n            }).length\n          if (column.headers) {\n            return recurse(column.headers)\n          }\n          return column.isVisible\n        })\n\n        // Give headerGroups getRowProps\n        if (headerGroup.headers.length) {\n          headerGroup.getHeaderGroupProps = makePropGetter(\n            getHooks().getHeaderGroupProps,\n            { instance: getInstance(), headerGroup, index: i }\n          )\n\n          headerGroup.getFooterGroupProps = makePropGetter(\n            getHooks().getFooterGroupProps,\n            { instance: getInstance(), headerGroup, index: i }\n          )\n\n          return true\n        }\n\n        return false\n      }),\n    [headerGroups, getInstance, getHooks]\n  )\n\n  getInstance().footerGroups = [...getInstance().headerGroups].reverse()\n\n  // The prepareRow function is absolutely necessary and MUST be called on\n  // any rows the user wishes to be displayed.\n\n  getInstance().prepareRow = React.useCallback(\n    row => {\n      row.getRowProps = makePropGetter(getHooks().getRowProps, {\n        instance: getInstance(),\n        row,\n      })\n\n      // Build the visible cells for each row\n      row.allCells = allColumns.map(column => {\n        const value = row.values[column.id]\n\n        const cell = {\n          column,\n          row,\n          value,\n        }\n\n        // Give each cell a getCellProps base\n        cell.getCellProps = makePropGetter(getHooks().getCellProps, {\n          instance: getInstance(),\n          cell,\n        })\n\n        // Give each cell a renderer function (supports multiple renderers)\n        cell.render = makeRenderer(getInstance(), column, {\n          row,\n          cell,\n          value,\n        })\n\n        return cell\n      })\n\n      row.cells = visibleColumns.map(column =>\n        row.allCells.find(cell => cell.column.id === column.id)\n      )\n\n      // need to apply any row specific hooks (useExpanded requires this)\n      loopHooks(getHooks().prepareRow, row, { instance: getInstance() })\n    },\n    [getHooks, getInstance, allColumns, visibleColumns]\n  )\n\n  getInstance().getTableProps = makePropGetter(getHooks().getTableProps, {\n    instance: getInstance(),\n  })\n\n  getInstance().getTableBodyProps = makePropGetter(\n    getHooks().getTableBodyProps,\n    {\n      instance: getInstance(),\n    }\n  )\n\n  loopHooks(getHooks().useFinalInstance, getInstance())\n\n  return getInstance()\n}\n\nfunction calculateHeaderWidths(headers, left = 0) {\n  let sumTotalMinWidth = 0\n  let sumTotalWidth = 0\n  let sumTotalMaxWidth = 0\n  let sumTotalFlexWidth = 0\n\n  headers.forEach(header => {\n    let { headers: subHeaders } = header\n\n    header.totalLeft = left\n\n    if (subHeaders && subHeaders.length) {\n      const [\n        totalMinWidth,\n        totalWidth,\n        totalMaxWidth,\n        totalFlexWidth,\n      ] = calculateHeaderWidths(subHeaders, left)\n      header.totalMinWidth = totalMinWidth\n      header.totalWidth = totalWidth\n      header.totalMaxWidth = totalMaxWidth\n      header.totalFlexWidth = totalFlexWidth\n    } else {\n      header.totalMinWidth = header.minWidth\n      header.totalWidth = Math.min(\n        Math.max(header.minWidth, header.width),\n        header.maxWidth\n      )\n      header.totalMaxWidth = header.maxWidth\n      header.totalFlexWidth = header.canResize ? header.totalWidth : 0\n    }\n    if (header.isVisible) {\n      left += header.totalWidth\n      sumTotalMinWidth += header.totalMinWidth\n      sumTotalWidth += header.totalWidth\n      sumTotalMaxWidth += header.totalMaxWidth\n      sumTotalFlexWidth += header.totalFlexWidth\n    }\n  })\n\n  return [sumTotalMinWidth, sumTotalWidth, sumTotalMaxWidth, sumTotalFlexWidth]\n}\n\nfunction accessRowsForColumn({\n  data,\n  rows,\n  flatRows,\n  rowsById,\n  column,\n  getRowId,\n  getSubRows,\n  accessValueHooks,\n  getInstance,\n}) {\n  // Access the row's data column-by-column\n  // We do it this way so we can incrementally add materialized\n  // columns after the first pass and avoid excessive looping\n  const accessRow = (originalRow, rowIndex, depth = 0, parent, parentRows) => {\n    // Keep the original reference around\n    const original = originalRow\n\n    const id = getRowId(originalRow, rowIndex, parent)\n\n    let row = rowsById[id]\n\n    // If the row hasn't been created, let's make it\n    if (!row) {\n      row = {\n        id,\n        original,\n        index: rowIndex,\n        depth,\n        cells: [{}], // This is a dummy cell\n      }\n\n      // Override common array functions (and the dummy cell's getCellProps function)\n      // to show an error if it is accessed without calling prepareRow\n      row.cells.map = unpreparedAccessWarning\n      row.cells.filter = unpreparedAccessWarning\n      row.cells.forEach = unpreparedAccessWarning\n      row.cells[0].getCellProps = unpreparedAccessWarning\n\n      // Create the cells and values\n      row.values = {}\n\n      // Push this row into the parentRows array\n      parentRows.push(row)\n      // Keep track of every row in a flat array\n      flatRows.push(row)\n      // Also keep track of every row by its ID\n      rowsById[id] = row\n\n      // Get the original subrows\n      row.originalSubRows = getSubRows(originalRow, rowIndex)\n\n      // Then recursively access them\n      if (row.originalSubRows) {\n        const subRows = []\n        row.originalSubRows.forEach((d, i) =>\n          accessRow(d, i, depth + 1, row, subRows)\n        )\n        // Keep the new subRows array on the row\n        row.subRows = subRows\n      }\n    } else if (row.subRows) {\n      // If the row exists, then it's already been accessed\n      // Keep recursing, but don't worry about passing the\n      // accumlator array (those rows already exist)\n      row.originalSubRows.forEach((d, i) => accessRow(d, i, depth + 1, row))\n    }\n\n    // If the column has an accessor, use it to get a value\n    if (column.accessor) {\n      row.values[column.id] = column.accessor(\n        originalRow,\n        rowIndex,\n        row,\n        parentRows,\n        data\n      )\n    }\n\n    // Allow plugins to manipulate the column value\n    row.values[column.id] = reduceHooks(\n      accessValueHooks,\n      row.values[column.id],\n      {\n        row,\n        column,\n        instance: getInstance(),\n      },\n      true\n    )\n  }\n\n  data.forEach((originalRow, rowIndex) =>\n    accessRow(originalRow, rowIndex, 0, undefined, rows)\n  )\n}\n","import React from 'react'\n\nimport { expandRows } from '../utils'\n\nimport {\n  useGetLatest,\n  actions,\n  useMountedLayoutEffect,\n  makePropGetter,\n  ensurePluginOrder,\n} from '../publicUtils'\n\n// Actions\nactions.resetExpanded = 'resetExpanded'\nactions.toggleRowExpanded = 'toggleRowExpanded'\nactions.toggleAllRowsExpanded = 'toggleAllRowsExpanded'\n\nexport const useExpanded = hooks => {\n  hooks.getToggleAllRowsExpandedProps = [defaultGetToggleAllRowsExpandedProps]\n  hooks.getToggleRowExpandedProps = [defaultGetToggleRowExpandedProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseExpanded.pluginName = 'useExpanded'\n\nconst defaultGetToggleAllRowsExpandedProps = (props, { instance }) => [\n  props,\n  {\n    onClick: e => {\n      instance.toggleAllRowsExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle All Rows Expanded',\n  },\n]\n\nconst defaultGetToggleRowExpandedProps = (props, { row }) => [\n  props,\n  {\n    onClick: () => {\n      row.toggleRowExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle Row Expanded',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      expanded: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetExpanded) {\n    return {\n      ...state,\n      expanded: instance.initialState.expanded || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsExpanded) {\n    const { value } = action\n    const { rowsById } = instance\n\n    const isAllRowsExpanded =\n      Object.keys(rowsById).length === Object.keys(state.expanded).length\n\n    const expandAll = typeof value !== 'undefined' ? value : !isAllRowsExpanded\n\n    if (expandAll) {\n      const expanded = {}\n\n      Object.keys(rowsById).forEach(rowId => {\n        expanded[rowId] = true\n      })\n\n      return {\n        ...state,\n        expanded,\n      }\n    }\n\n    return {\n      ...state,\n      expanded: {},\n    }\n  }\n\n  if (action.type === actions.toggleRowExpanded) {\n    const { id, value: setExpanded } = action\n    const exists = state.expanded[id]\n\n    const shouldExist =\n      typeof setExpanded !== 'undefined' ? setExpanded : !exists\n\n    if (!exists && shouldExist) {\n      return {\n        ...state,\n        expanded: {\n          ...state.expanded,\n          [id]: true,\n        },\n      }\n    } else if (exists && !shouldExist) {\n      const { [id]: _, ...rest } = state.expanded\n      return {\n        ...state,\n        expanded: rest,\n      }\n    } else {\n      return state\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    rowsById,\n    manualExpandedKey = 'expanded',\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    autoResetExpanded = true,\n    getHooks,\n    plugins,\n    state: { expanded },\n    dispatch,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useSortBy', 'useGroupBy', 'usePivotColumns', 'useGlobalFilter'],\n    'useExpanded'\n  )\n\n  const getAutoResetExpanded = useGetLatest(autoResetExpanded)\n\n  let isAllRowsExpanded = Boolean(\n    Object.keys(rowsById).length && Object.keys(expanded).length\n  )\n\n  if (isAllRowsExpanded) {\n    if (Object.keys(rowsById).some(id => !expanded[id])) {\n      isAllRowsExpanded = false\n    }\n  }\n\n  // Bypass any effects from firing when this changes\n  useMountedLayoutEffect(() => {\n    if (getAutoResetExpanded()) {\n      dispatch({ type: actions.resetExpanded })\n    }\n  }, [dispatch, data])\n\n  const toggleRowExpanded = React.useCallback(\n    (id, value) => {\n      dispatch({ type: actions.toggleRowExpanded, id, value })\n    },\n    [dispatch]\n  )\n\n  const toggleAllRowsExpanded = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsExpanded, value }),\n    [dispatch]\n  )\n\n  const expandedRows = React.useMemo(() => {\n    if (paginateExpandedRows) {\n      return expandRows(rows, { manualExpandedKey, expanded, expandSubRows })\n    }\n\n    return rows\n  }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows])\n\n  const expandedDepth = React.useMemo(() => findExpandedDepth(expanded), [\n    expanded,\n  ])\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsExpandedProps = makePropGetter(\n    getHooks().getToggleAllRowsExpandedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    preExpandedRows: rows,\n    expandedRows,\n    rows: expandedRows,\n    expandedDepth,\n    isAllRowsExpanded,\n    toggleRowExpanded,\n    toggleAllRowsExpanded,\n    getToggleAllRowsExpandedProps,\n  })\n}\n\nfunction prepareRow(row, { instance: { getHooks }, instance }) {\n  row.toggleRowExpanded = set => instance.toggleRowExpanded(row.id, set)\n\n  row.getToggleRowExpandedProps = makePropGetter(\n    getHooks().getToggleRowExpandedProps,\n    {\n      instance,\n      row,\n    }\n  )\n}\n\nfunction findExpandedDepth(expanded) {\n  let maxDepth = 0\n\n  Object.keys(expanded).forEach(id => {\n    const splitId = id.split('.')\n    maxDepth = Math.max(maxDepth, splitId.length)\n  })\n\n  return maxDepth\n}\n","export const text = (rows, ids, filterValue) => {\n  rows = rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return String(rowValue)\n        .toLowerCase()\n        .includes(String(filterValue).toLowerCase())\n    })\n  })\n  return rows\n}\n\ntext.autoRemove = val => !val\n\nexport const exactText = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase()\n        : true\n    })\n  })\n}\n\nexactText.autoRemove = val => !val\n\nexport const exactTextCase = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue) === String(filterValue)\n        : true\n    })\n  })\n}\n\nexactTextCase.autoRemove = val => !val\n\nexport const includes = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue.includes(filterValue)\n    })\n  })\n}\n\nincludes.autoRemove = val => !val || !val.length\n\nexport const includesAll = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.every(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\nincludesAll.autoRemove = val => !val || !val.length\n\nexport const includesSome = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.some(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\nincludesSome.autoRemove = val => !val || !val.length\n\nexport const includesValue = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return filterValue.includes(rowValue)\n    })\n  })\n}\n\nincludesValue.autoRemove = val => !val || !val.length\n\nexport const exact = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue === filterValue\n    })\n  })\n}\n\nexact.autoRemove = val => typeof val === 'undefined'\n\nexport const equals = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      // eslint-disable-next-line eqeqeq\n      return rowValue == filterValue\n    })\n  })\n}\n\nequals.autoRemove = val => val == null\n\nexport const between = (rows, ids, filterValue) => {\n  let [min, max] = filterValue || []\n\n  min = typeof min === 'number' ? min : -Infinity\n  max = typeof max === 'number' ? max : Infinity\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue >= min && rowValue <= max\n    })\n  })\n}\n\nbetween.autoRemove = val =>\n  !val || (typeof val[0] !== 'number' && typeof val[1] !== 'number')\n","import React from 'react'\n\nimport {\n  getFirstDefined,\n  getFilterMethod,\n  shouldAutoRemoveFilter,\n} from '../utils'\n\nimport {\n  actions,\n  useGetLatest,\n  functionalUpdate,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetFilters = 'resetFilters'\nactions.setFilter = 'setFilter'\nactions.setAllFilters = 'setAllFilters'\n\nexport const useFilters = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseFilters.pluginName = 'useFilters'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      filters: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetFilters) {\n    return {\n      ...state,\n      filters: instance.initialState.filters || [],\n    }\n  }\n\n  if (action.type === actions.setFilter) {\n    const { columnId, filterValue } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    const column = allColumns.find(d => d.id === columnId)\n\n    if (!column) {\n      throw new Error(\n        `React-Table: Could not find a column with id: ${columnId}`\n      )\n    }\n\n    const filterMethod = getFilterMethod(\n      column.filter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const previousfilter = state.filters.find(d => d.id === columnId)\n\n    const newFilter = functionalUpdate(\n      filterValue,\n      previousfilter && previousfilter.value\n    )\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter, column)) {\n      return {\n        ...state,\n        filters: state.filters.filter(d => d.id !== columnId),\n      }\n    }\n\n    if (previousfilter) {\n      return {\n        ...state,\n        filters: state.filters.map(d => {\n          if (d.id === columnId) {\n            return { id: columnId, value: newFilter }\n          }\n          return d\n        }),\n      }\n    }\n\n    return {\n      ...state,\n      filters: [...state.filters, { id: columnId, value: newFilter }],\n    }\n  }\n\n  if (action.type === actions.setAllFilters) {\n    const { filters } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    return {\n      ...state,\n      // Filter out undefined values\n      filters: functionalUpdate(filters, state.filters).filter(filter => {\n        const column = allColumns.find(d => d.id === filter.id)\n        const filterMethod = getFilterMethod(\n          column.filter,\n          userFilterTypes || {},\n          filterTypes\n        )\n\n        if (\n          shouldAutoRemoveFilter(filterMethod.autoRemove, filter.value, column)\n        ) {\n          return false\n        }\n        return true\n      }),\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    manualFilters,\n    defaultCanFilter = false,\n    disableFilters,\n    state: { filters },\n    dispatch,\n    autoResetFilters = true,\n  } = instance\n\n  const setFilter = React.useCallback(\n    (columnId, filterValue) => {\n      dispatch({ type: actions.setFilter, columnId, filterValue })\n    },\n    [dispatch]\n  )\n\n  const setAllFilters = React.useCallback(\n    filters => {\n      dispatch({\n        type: actions.setAllFilters,\n        filters,\n      })\n    },\n    [dispatch]\n  )\n\n  allColumns.forEach(column => {\n    const {\n      id,\n      accessor,\n      defaultCanFilter: columnDefaultCanFilter,\n      disableFilters: columnDisableFilters,\n    } = column\n\n    // Determine if a column is filterable\n    column.canFilter = accessor\n      ? getFirstDefined(\n          columnDisableFilters === true ? false : undefined,\n          disableFilters === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false)\n\n    // Provide the column a way of updating the filter value\n    column.setFilter = val => setFilter(column.id, val)\n\n    // Provide the current filter value to the column for\n    // convenience\n    const found = filters.find(d => d.id === id)\n    column.filterValue = found && found.value\n  })\n\n  const [\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualFilters || !filters.length) {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    // Filters top level and nested rows\n    const filterRows = (rows, depth = 0) => {\n      let filteredRows = rows\n\n      filteredRows = filters.reduce(\n        (filteredSoFar, { id: columnId, value: filterValue }) => {\n          // Find the filters column\n          const column = allColumns.find(d => d.id === columnId)\n\n          if (!column) {\n            return filteredSoFar\n          }\n\n          if (depth === 0) {\n            column.preFilteredRows = filteredSoFar\n          }\n\n          const filterMethod = getFilterMethod(\n            column.filter,\n            userFilterTypes || {},\n            filterTypes\n          )\n\n          if (!filterMethod) {\n            console.warn(\n              `Could not find a valid 'column.filter' for column with the ID: ${column.id}.`\n            )\n            return filteredSoFar\n          }\n\n          // Pass the rows, id, filterValue and column to the filterMethod\n          // to get the filtered rows back\n          column.filteredRows = filterMethod(\n            filteredSoFar,\n            [columnId],\n            filterValue\n          )\n\n          return column.filteredRows\n        },\n        rows\n      )\n\n      // Apply the filter to any subRows\n      // We technically could do this recursively in the above loop,\n      // but that would severely hinder the API for the user, since they\n      // would be required to do that recursion in some scenarios\n      filteredRows.forEach(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n        if (!row.subRows) {\n          return\n        }\n\n        row.subRows =\n          row.subRows && row.subRows.length > 0\n            ? filterRows(row.subRows, depth + 1)\n            : row.subRows\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualFilters,\n    filters,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userFilterTypes,\n  ])\n\n  React.useMemo(() => {\n    // Now that each filtered column has it's partially filtered rows,\n    // lets assign the final filtered rows to all of the other columns\n    const nonFilteredColumns = allColumns.filter(\n      column => !filters.find(d => d.id === column.id)\n    )\n\n    // This essentially enables faceted filter options to be built easily\n    // using every column's preFilteredRows value\n    nonFilteredColumns.forEach(column => {\n      column.preFilteredRows = filteredRows\n      column.filteredRows = filteredRows\n    })\n  }, [filteredRows, filters, allColumns])\n\n  const getAutoResetFilters = useGetLatest(autoResetFilters)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetFilters()) {\n      dispatch({ type: actions.resetFilters })\n    }\n  }, [dispatch, manualFilters ? null : data])\n\n  Object.assign(instance, {\n    preFilteredRows: rows,\n    preFilteredFlatRows: flatRows,\n    preFilteredRowsById: rowsById,\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n    rows: filteredRows,\n    flatRows: filteredFlatRows,\n    rowsById: filteredRowsById,\n    setFilter,\n    setAllFilters,\n  })\n}\n","import React from 'react'\n\nimport {\n  getFilterMethod,\n  shouldAutoRemoveFilter,\n  getFirstDefined,\n} from '../utils'\n\nimport {\n  actions,\n  useMountedLayoutEffect,\n  functionalUpdate,\n  useGetLatest,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetGlobalFilter = 'resetGlobalFilter'\nactions.setGlobalFilter = 'setGlobalFilter'\n\nexport const useGlobalFilter = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseGlobalFilter.pluginName = 'useGlobalFilter'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.resetGlobalFilter) {\n    return {\n      ...state,\n      globalFilter: instance.initialState.globalFilter || undefined,\n    }\n  }\n\n  if (action.type === actions.setGlobalFilter) {\n    const { filterValue } = action\n    const { userFilterTypes } = instance\n\n    const filterMethod = getFilterMethod(\n      instance.globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const newFilter = functionalUpdate(filterValue, state.globalFilter)\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {\n      const { globalFilter, ...stateWithoutGlobalFilter } = state\n      return stateWithoutGlobalFilter\n    }\n\n    return {\n      ...state,\n      globalFilter: newFilter,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    globalFilter,\n    manualGlobalFilter,\n    state: { globalFilter: globalFilterValue },\n    dispatch,\n    autoResetGlobalFilter = true,\n    disableGlobalFilter,\n  } = instance\n\n  const setGlobalFilter = React.useCallback(\n    filterValue => {\n      dispatch({ type: actions.setGlobalFilter, filterValue })\n    },\n    [dispatch]\n  )\n\n  // TODO: Create a filter cache for incremental high speed multi-filtering\n  // This gets pretty complicated pretty fast, since you have to maintain a\n  // cache for each row group (top-level rows, and each row's recursive subrows)\n  // This would make multi-filtering a lot faster though. Too far?\n\n  const [\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualGlobalFilter || typeof globalFilterValue === 'undefined') {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    const filterMethod = getFilterMethod(\n      globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    if (!filterMethod) {\n      console.warn(`Could not find a valid 'globalFilter' option.`)\n      return rows\n    }\n\n    allColumns.forEach(column => {\n      const { disableGlobalFilter: columnDisableGlobalFilter } = column\n\n      column.canFilter = getFirstDefined(\n        columnDisableGlobalFilter === true ? false : undefined,\n        disableGlobalFilter === true ? false : undefined,\n        true\n      )\n    })\n\n    const filterableColumns = allColumns.filter(c => c.canFilter === true)\n\n    // Filters top level and nested rows\n    const filterRows = filteredRows => {\n      filteredRows = filterMethod(\n        filteredRows,\n        filterableColumns.map(d => d.id),\n        globalFilterValue\n      )\n\n      filteredRows.forEach(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n\n        row.subRows =\n          row.subRows && row.subRows.length\n            ? filterRows(row.subRows)\n            : row.subRows\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualGlobalFilter,\n    globalFilterValue,\n    globalFilter,\n    userFilterTypes,\n    allColumns,\n    rows,\n    flatRows,\n    rowsById,\n    disableGlobalFilter,\n  ])\n\n  const getAutoResetGlobalFilter = useGetLatest(autoResetGlobalFilter)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGlobalFilter()) {\n      dispatch({ type: actions.resetGlobalFilter })\n    }\n  }, [dispatch, manualGlobalFilter ? null : data])\n\n  Object.assign(instance, {\n    preGlobalFilteredRows: rows,\n    preGlobalFilteredFlatRows: flatRows,\n    preGlobalFilteredRowsById: rowsById,\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n    rows: globalFilteredRows,\n    flatRows: globalFilteredFlatRows,\n    rowsById: globalFilteredRowsById,\n    setGlobalFilter,\n    disableGlobalFilter,\n  })\n}\n","export function sum(values, aggregatedValues) {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return aggregatedValues.reduce(\n    (sum, next) => sum + (typeof next === 'number' ? next : 0),\n    0\n  )\n}\n\nexport function min(values) {\n  let min = values[0] || 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n    }\n  })\n\n  return min\n}\n\nexport function max(values) {\n  let max = values[0] || 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      max = Math.max(max, value)\n    }\n  })\n\n  return max\n}\n\nexport function minMax(values) {\n  let min = values[0] || 0\n  let max = values[0] || 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return `${min}..${max}`\n}\n\nexport function average(values) {\n  return sum(null, values) / values.length\n}\n\nexport function median(values) {\n  if (!values.length) {\n    return null\n  }\n\n  const mid = Math.floor(values.length / 2)\n  const nums = [...values].sort((a, b) => a - b)\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2\n}\n\nexport function unique(values) {\n  return Array.from(new Set(values).values())\n}\n\nexport function uniqueCount(values) {\n  return new Set(values).size\n}\n\nexport function count(values) {\n  return values.length\n}\n","import React from 'react'\n\nimport * as aggregations from '../aggregations'\n\nimport { getFirstDefined, flattenBy } from '../utils'\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst emptyArray = []\nconst emptyObject = {}\n\n// Actions\nactions.resetGroupBy = 'resetGroupBy'\nactions.setGroupBy = 'setGroupBy'\nactions.toggleGroupBy = 'toggleGroupBy'\n\nexport const useGroupBy = hooks => {\n  hooks.getGroupByToggleProps = [defaultGetGroupByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.groupBy,\n  ])\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseGroupBy.pluginName = 'useGroupBy'\n\nconst defaultGetGroupByToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canGroupBy\n      ? e => {\n          e.persist()\n          header.toggleGroupBy()\n        }\n      : undefined,\n    style: {\n      cursor: header.canGroupBy ? 'pointer' : undefined,\n    },\n    title: 'Toggle GroupBy',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      groupBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetGroupBy) {\n    return {\n      ...state,\n      groupBy: instance.initialState.groupBy || [],\n    }\n  }\n\n  if (action.type === actions.setGroupBy) {\n    const { value } = action\n    return {\n      ...state,\n      groupBy: value,\n    }\n  }\n\n  if (action.type === actions.toggleGroupBy) {\n    const { columnId, value: setGroupBy } = action\n\n    const resolvedGroupBy =\n      typeof setGroupBy !== 'undefined'\n        ? setGroupBy\n        : !state.groupBy.includes(columnId)\n\n    if (resolvedGroupBy) {\n      return {\n        ...state,\n        groupBy: [...state.groupBy, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      groupBy: state.groupBy.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { groupBy },\n    },\n  }\n) {\n  // Sort grouped columns to the start of the column list\n  // before the headers are built\n\n  const groupByColumns = groupBy\n    .map(g => columns.find(col => col.id === g))\n    .filter(Boolean)\n\n  const nonGroupByColumns = columns.filter(col => !groupBy.includes(col.id))\n\n  columns = [...groupByColumns, ...nonGroupByColumns]\n\n  columns.forEach(column => {\n    column.isGrouped = groupBy.includes(column.id)\n    column.groupedIndex = groupBy.indexOf(column.id)\n  })\n\n  return columns\n}\n\nconst defaultUserAggregations = {}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    flatHeaders,\n    groupByFn = defaultGroupByFn,\n    manualGroupBy,\n    aggregations: userAggregations = defaultUserAggregations,\n    plugins,\n    state: { groupBy },\n    dispatch,\n    autoResetGroupBy = true,\n    disableGroupBy,\n    defaultCanGroupBy,\n    getHooks,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useColumnOrder', 'useFilters'], 'useGroupBy')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultGroupBy: defaultColumnGroupBy,\n      disableGroupBy: columnDisableGroupBy,\n    } = column\n\n    column.canGroupBy = accessor\n      ? getFirstDefined(\n          column.canGroupBy,\n          columnDisableGroupBy === true ? false : undefined,\n          disableGroupBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canGroupBy,\n          defaultColumnGroupBy,\n          defaultCanGroupBy,\n          false\n        )\n\n    if (column.canGroupBy) {\n      column.toggleGroupBy = () => instance.toggleGroupBy(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const toggleGroupBy = React.useCallback(\n    (columnId, value) => {\n      dispatch({ type: actions.toggleGroupBy, columnId, value })\n    },\n    [dispatch]\n  )\n\n  const setGroupBy = React.useCallback(\n    value => {\n      dispatch({ type: actions.setGroupBy, value })\n    },\n    [dispatch]\n  )\n\n  flatHeaders.forEach(header => {\n    header.getGroupByToggleProps = makePropGetter(\n      getHooks().getGroupByToggleProps,\n      { instance: getInstance(), header }\n    )\n  })\n\n  const [\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n  ] = React.useMemo(() => {\n    if (manualGroupBy || !groupBy.length) {\n      return [\n        rows,\n        flatRows,\n        rowsById,\n        emptyArray,\n        emptyObject,\n        flatRows,\n        rowsById,\n      ]\n    }\n\n    // Ensure that the list of filtered columns exist\n    const existingGroupBy = groupBy.filter(g =>\n      allColumns.find(col => col.id === g)\n    )\n\n    // Find the columns that can or are aggregating\n    // Uses each column to aggregate rows into a single value\n    const aggregateRowsToValues = (leafRows, groupedRows, depth) => {\n      const values = {}\n\n      allColumns.forEach(column => {\n        // Don't aggregate columns that are in the groupBy\n        if (existingGroupBy.includes(column.id)) {\n          values[column.id] = groupedRows[0]\n            ? groupedRows[0].values[column.id]\n            : null\n          return\n        }\n\n        // Aggregate the values\n        let aggregateFn =\n          typeof column.aggregate === 'function'\n            ? column.aggregate\n            : userAggregations[column.aggregate] ||\n              aggregations[column.aggregate]\n\n        if (aggregateFn) {\n          // Get the columnValues to aggregate\n          const groupedValues = groupedRows.map(row => row.values[column.id])\n\n          // Get the columnValues to aggregate\n          const leafValues = leafRows.map(row => {\n            let columnValue = row.values[column.id]\n\n            if (!depth && column.aggregateValue) {\n              const aggregateValueFn =\n                typeof column.aggregateValue === 'function'\n                  ? column.aggregateValue\n                  : userAggregations[column.aggregateValue] ||\n                    aggregations[column.aggregateValue]\n\n              if (!aggregateValueFn) {\n                console.info({ column })\n                throw new Error(\n                  `React Table: Invalid column.aggregateValue option for column listed above`\n                )\n              }\n\n              columnValue = aggregateValueFn(columnValue, row, column)\n            }\n            return columnValue\n          })\n\n          values[column.id] = aggregateFn(leafValues, groupedValues)\n        } else if (column.aggregate) {\n          console.info({ column })\n          throw new Error(\n            `React Table: Invalid column.aggregate option for column listed above`\n          )\n        } else {\n          values[column.id] = null\n        }\n      })\n\n      return values\n    }\n\n    let groupedFlatRows = []\n    const groupedRowsById = {}\n    const onlyGroupedFlatRows = []\n    const onlyGroupedRowsById = {}\n    const nonGroupedFlatRows = []\n    const nonGroupedRowsById = {}\n\n    // Recursively group the data\n    const groupUpRecursively = (rows, depth = 0, parentId) => {\n      // This is the last level, just return the rows\n      if (depth === existingGroupBy.length) {\n        return rows.map((row) => ({ ...row, depth }))\n      }\n\n      const columnId = existingGroupBy[depth]\n\n      // Group the rows together for this level\n      let rowGroupsMap = groupByFn(rows, columnId)\n\n      // Peform aggregations for each group\n      const aggregatedGroupedRows = Object.entries(rowGroupsMap).map(\n        ([groupByVal, groupedRows], index) => {\n          let id = `${columnId}:${groupByVal}`\n          id = parentId ? `${parentId}>${id}` : id\n\n          // First, Recurse to group sub rows before aggregation\n          const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n          // Flatten the leaf rows of the rows in this group\n          const leafRows = depth\n            ? flattenBy(groupedRows, 'leafRows')\n            : groupedRows\n\n          const values = aggregateRowsToValues(leafRows, groupedRows, depth)\n\n          const row = {\n            id,\n            isGrouped: true,\n            groupByID: columnId,\n            groupByVal,\n            values,\n            subRows,\n            leafRows,\n            depth,\n            index,\n          }\n\n          subRows.forEach(subRow => {\n            groupedFlatRows.push(subRow)\n            groupedRowsById[subRow.id] = subRow\n            if (subRow.isGrouped) {\n              onlyGroupedFlatRows.push(subRow)\n              onlyGroupedRowsById[subRow.id] = subRow\n            } else {\n              nonGroupedFlatRows.push(subRow)\n              nonGroupedRowsById[subRow.id] = subRow\n            }\n          })\n\n          return row\n        }\n      )\n\n      return aggregatedGroupedRows\n    }\n\n    const groupedRows = groupUpRecursively(rows)\n\n    groupedRows.forEach(subRow => {\n      groupedFlatRows.push(subRow)\n      groupedRowsById[subRow.id] = subRow\n      if (subRow.isGrouped) {\n        onlyGroupedFlatRows.push(subRow)\n        onlyGroupedRowsById[subRow.id] = subRow\n      } else {\n        nonGroupedFlatRows.push(subRow)\n        nonGroupedRowsById[subRow.id] = subRow\n      }\n    })\n\n    // Assign the new data\n    return [\n      groupedRows,\n      groupedFlatRows,\n      groupedRowsById,\n      onlyGroupedFlatRows,\n      onlyGroupedRowsById,\n      nonGroupedFlatRows,\n      nonGroupedRowsById,\n    ]\n  }, [\n    manualGroupBy,\n    groupBy,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userAggregations,\n    groupByFn,\n  ])\n\n  const getAutoResetGroupBy = useGetLatest(autoResetGroupBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGroupBy()) {\n      dispatch({ type: actions.resetGroupBy })\n    }\n  }, [dispatch, manualGroupBy ? null : data])\n\n  Object.assign(instance, {\n    preGroupedRows: rows,\n    preGroupedFlatRow: flatRows,\n    preGroupedRowsById: rowsById,\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n    rows: groupedRows,\n    flatRows: groupedFlatRows,\n    rowsById: groupedRowsById,\n    toggleGroupBy,\n    setGroupBy,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the groupBy and the pivot cell for the row\n    cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID\n    // Placeholder cells are any columns in the groupBy that are not grouped\n    cell.isPlaceholder = !cell.isGrouped && cell.column.isGrouped\n    // Aggregated cells are not grouped, not repeated, but still have subRows\n    cell.isAggregated =\n      !cell.isGrouped && !cell.isPlaceholder && row.subRows?.length\n  })\n}\n\nexport function defaultGroupByFn(rows, columnId) {\n  return rows.reduce((prev, row, i) => {\n    // TODO: Might want to implement a key serializer here so\n    // irregular column values can still be grouped if needed?\n    const resKey = `${row.values[columnId]}`\n    prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : []\n    prev[resKey].push(row)\n    return prev\n  }, {})\n}\n","const reSplitAlphaNumeric = /([0-9]+)/gm\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nexport const alphanumeric = (rowA, rowB, columnId) => {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  // Force to strings (or \"\" for unsupported types)\n  a = toString(a)\n  b = toString(b)\n\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  a = a.split(reSplitAlphaNumeric).filter(Boolean)\n  b = b.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    let aa = a.shift()\n    let bb = b.shift()\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\nexport function datetime(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  a = a.getTime()\n  b = b.getTime()\n\n  return compareBasic(a, b)\n}\n\nexport function basic(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  return compareBasic(a, b)\n}\n\nexport function string(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  a = a.split('').filter(Boolean)\n  b = b.split('').filter(Boolean)\n\n  while (a.length && b.length) {\n    let aa = a.shift()\n    let bb = b.shift()\n\n    let alower = aa.toLowerCase()\n    let blower = bb.toLowerCase()\n\n    // Case insensitive comparison until characters match\n    if (alower > blower) {\n      return 1\n    }\n    if (blower > alower) {\n      return -1\n    }\n    // If lowercase characters are identical\n    if (aa > bb) {\n      return 1\n    }\n    if (bb > aa) {\n      return -1\n    }\n    continue\n  }\n\n  return a.length - b.length\n}\n\nexport function number(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  const replaceNonNumeric = /[^0-9.]/gi\n\n  a = Number(String(a).replace(replaceNonNumeric, ''))\n  b = Number(String(b).replace(replaceNonNumeric, ''))\n\n  return compareBasic(a, b)\n}\n\n// Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction getRowValuesByColumnID(row1, row2, columnId) {\n  return [row1.values[columnId], row2.values[columnId]]\n}\n\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n","import React from 'react'\n\nimport {\n  actions,\n  ensurePluginOrder,\n  defaultColumn,\n  makePropGetter,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport { getFirstDefined, isFunction } from '../utils'\n\nimport * as sortTypes from '../sortTypes'\n\n// Actions\nactions.resetSortBy = 'resetSortBy'\nactions.setSortBy = 'setSortBy'\nactions.toggleSortBy = 'toggleSortBy'\nactions.clearSortBy = 'clearSortBy'\n\ndefaultColumn.sortType = 'alphanumeric'\ndefaultColumn.sortDescFirst = false\n\nexport const useSortBy = hooks => {\n  hooks.getSortByToggleProps = [defaultGetSortByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseSortBy.pluginName = 'useSortBy'\n\nconst defaultGetSortByToggleProps = (props, { instance, column }) => {\n  const { isMultiSortEvent = e => e.shiftKey } = instance\n\n  return [\n    props,\n    {\n      onClick: column.canSort\n        ? e => {\n            e.persist()\n            column.toggleSortBy(\n              undefined,\n              !instance.disableMultiSort && isMultiSortEvent(e)\n            )\n          }\n        : undefined,\n      style: {\n        cursor: column.canSort ? 'pointer' : undefined,\n      },\n      title: column.canSort ? 'Toggle SortBy' : undefined,\n    },\n  ]\n}\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      sortBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSortBy) {\n    return {\n      ...state,\n      sortBy: instance.initialState.sortBy || [],\n    }\n  }\n\n  if (action.type === actions.clearSortBy) {\n    const { sortBy } = state\n    const newSortBy = sortBy.filter(d => d.id !== action.columnId)\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n\n  if (action.type === actions.setSortBy) {\n    const { sortBy } = action\n    return {\n      ...state,\n      sortBy,\n    }\n  }\n\n  if (action.type === actions.toggleSortBy) {\n    const { columnId, desc, multi } = action\n\n    const {\n      allColumns,\n      disableMultiSort,\n      disableSortRemove,\n      disableMultiRemove,\n      maxMultiSortColCount = Number.MAX_SAFE_INTEGER,\n    } = instance\n\n    const { sortBy } = state\n\n    // Find the column for this columnId\n    const column = allColumns.find(d => d.id === columnId)\n    const { sortDescFirst } = column\n\n    // Find any existing sortBy for this column\n    const existingSortBy = sortBy.find(d => d.id === columnId)\n    const existingIndex = sortBy.findIndex(d => d.id === columnId)\n    const hasDescDefined = typeof desc !== 'undefined' && desc !== null\n\n    let newSortBy = []\n\n    // What should we do with this sort action?\n    let sortAction\n\n    if (!disableMultiSort && multi) {\n      if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'add'\n      }\n    } else {\n      // Normal mode\n      if (existingIndex !== sortBy.length - 1 || sortBy.length !== 1) {\n        sortAction = 'replace'\n      } else if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'replace'\n      }\n    }\n\n    // Handle toggle states that will remove the sortBy\n    if (\n      sortAction === 'toggle' && // Must be toggling\n      !disableSortRemove && // If disableSortRemove, disable in general\n      !hasDescDefined && // Must not be setting desc\n      (multi ? !disableMultiRemove : true) && // If multi, don't allow if disableMultiRemove\n      ((existingSortBy && // Finally, detect if it should indeed be removed\n        existingSortBy.desc &&\n        !sortDescFirst) ||\n        (!existingSortBy.desc && sortDescFirst))\n    ) {\n      sortAction = 'remove'\n    }\n\n    if (sortAction === 'replace') {\n      newSortBy = [\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n    } else if (sortAction === 'add') {\n      newSortBy = [\n        ...sortBy,\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n      // Take latest n columns\n      newSortBy.splice(0, newSortBy.length - maxMultiSortColCount)\n    } else if (sortAction === 'toggle') {\n      // This flips (or sets) the\n      newSortBy = sortBy.map(d => {\n        if (d.id === columnId) {\n          return {\n            ...d,\n            desc: hasDescDefined ? desc : !existingSortBy.desc,\n          }\n        }\n        return d\n      })\n    } else if (sortAction === 'remove') {\n      newSortBy = sortBy.filter(d => d.id !== columnId)\n    }\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn = defaultOrderByFn,\n    sortTypes: userSortTypes,\n    manualSortBy,\n    defaultCanSort,\n    disableSortBy,\n    flatHeaders,\n    state: { sortBy },\n    dispatch,\n    plugins,\n    getHooks,\n    autoResetSortBy = true,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGlobalFilter', 'useGroupBy', 'usePivotColumns'],\n    'useSortBy'\n  )\n\n  const setSortBy = React.useCallback(\n    sortBy => {\n      dispatch({ type: actions.setSortBy, sortBy })\n    },\n    [dispatch]\n  )\n\n  // Updates sorting based on a columnId, desc flag and multi flag\n  const toggleSortBy = React.useCallback(\n    (columnId, desc, multi) => {\n      dispatch({ type: actions.toggleSortBy, columnId, desc, multi })\n    },\n    [dispatch]\n  )\n\n  // use reference to avoid memory leak in #1608\n  const getInstance = useGetLatest(instance)\n\n  // Add the getSortByToggleProps method to columns and headers\n  flatHeaders.forEach(column => {\n    const {\n      accessor,\n      canSort: defaultColumnCanSort,\n      disableSortBy: columnDisableSortBy,\n      id,\n    } = column\n\n    const canSort = accessor\n      ? getFirstDefined(\n          columnDisableSortBy === true ? false : undefined,\n          disableSortBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(defaultCanSort, defaultColumnCanSort, false)\n\n    column.canSort = canSort\n\n    if (column.canSort) {\n      column.toggleSortBy = (desc, multi) =>\n        toggleSortBy(column.id, desc, multi)\n\n      column.clearSortBy = () => {\n        dispatch({ type: actions.clearSortBy, columnId: column.id })\n      }\n    }\n\n    column.getSortByToggleProps = makePropGetter(\n      getHooks().getSortByToggleProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n\n    const columnSort = sortBy.find(d => d.id === id)\n    column.isSorted = !!columnSort\n    column.sortedIndex = sortBy.findIndex(d => d.id === id)\n    column.isSortedDesc = column.isSorted ? columnSort.desc : undefined\n  })\n\n  const [sortedRows, sortedFlatRows] = React.useMemo(() => {\n    if (manualSortBy || !sortBy.length) {\n      return [rows, flatRows]\n    }\n\n    const sortedFlatRows = []\n\n    // Filter out sortBys that correspond to non existing columns\n    const availableSortBy = sortBy.filter(sort =>\n      allColumns.find(col => col.id === sort.id)\n    )\n\n    const sortData = rows => {\n      // Use the orderByFn to compose multiple sortBy's together.\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = orderByFn(\n        rows,\n        availableSortBy.map(sort => {\n          // Support custom sorting methods for each column\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (!column) {\n            throw new Error(\n              `React-Table: Could not find a column with id: ${sort.id} while sorting`\n            )\n          }\n\n          const { sortType } = column\n\n          // Look up sortBy functions in this order:\n          // column function\n          // column string lookup on user sortType\n          // column string lookup on built-in sortType\n          // default function\n          // default string lookup on user sortType\n          // default string lookup on built-in sortType\n          const sortMethod =\n            isFunction(sortType) ||\n            (userSortTypes || {})[sortType] ||\n            sortTypes[sortType]\n\n          if (!sortMethod) {\n            throw new Error(\n              `React-Table: Could not find a valid sortType of '${sortType}' for column '${sort.id}'.`\n            )\n          }\n\n          // Return the correct sortFn.\n          // This function should always return in ascending order\n          return (a, b) => sortMethod(a, b, sort.id, sort.desc)\n        }),\n        // Map the directions\n        availableSortBy.map(sort => {\n          // Detect and use the sortInverted option\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (column && column.sortInverted) {\n            return sort.desc\n          }\n\n          return !sort.desc\n        })\n      )\n\n      // If there are sub-rows, sort them\n      sortedData.forEach(row => {\n        sortedFlatRows.push(row)\n        if (!row.subRows || row.subRows.length === 0) {\n          return\n        }\n        row.subRows = sortData(row.subRows)\n      })\n\n      return sortedData\n    }\n\n    return [sortData(rows), sortedFlatRows]\n  }, [\n    manualSortBy,\n    sortBy,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn,\n    userSortTypes,\n  ])\n\n  const getAutoResetSortBy = useGetLatest(autoResetSortBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSortBy()) {\n      dispatch({ type: actions.resetSortBy })\n    }\n  }, [manualSortBy ? null : data])\n\n  Object.assign(instance, {\n    preSortedRows: rows,\n    preSortedFlatRows: flatRows,\n    sortedRows,\n    sortedFlatRows,\n    rows: sortedRows,\n    flatRows: sortedFlatRows,\n    setSortBy,\n    toggleSortBy,\n  })\n}\n\nexport function defaultOrderByFn(arr, funcs, dirs) {\n  return [...arr].sort((rowA, rowB) => {\n    for (let i = 0; i < funcs.length; i += 1) {\n      const sortFn = funcs[i]\n      const desc = dirs[i] === false || dirs[i] === 'desc'\n      const sortInt = sortFn(rowA, rowB)\n      if (sortInt !== 0) {\n        return desc ? -sortInt : sortInt\n      }\n    }\n    return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index\n  })\n}\n","import React from 'react'\n\n//\n\nimport {\n  actions,\n  ensurePluginOrder,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { expandRows } from '../utils'\n\nconst pluginName = 'usePagination'\n\n// Actions\nactions.resetPage = 'resetPage'\nactions.gotoPage = 'gotoPage'\nactions.setPageSize = 'setPageSize'\n\nexport const usePagination = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nusePagination.pluginName = pluginName\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pageSize: 10,\n      pageIndex: 0,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPage) {\n    return {\n      ...state,\n      pageIndex: instance.initialState.pageIndex || 0,\n    }\n  }\n\n  if (action.type === actions.gotoPage) {\n    const { pageCount, page } = instance\n    const newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex)\n    let canNavigate = false\n\n    if (newPageIndex > state.pageIndex) {\n      // next page\n      canNavigate =\n        pageCount === -1\n          ? page.length >= state.pageSize\n          : newPageIndex < pageCount\n    } else if (newPageIndex < state.pageIndex) {\n      // prev page\n      canNavigate = newPageIndex > -1\n    }\n\n    if (!canNavigate) {\n      return state\n    }\n\n    return {\n      ...state,\n      pageIndex: newPageIndex,\n    }\n  }\n\n  if (action.type === actions.setPageSize) {\n    const { pageSize } = action\n    const topRowIndex = state.pageSize * state.pageIndex\n    const pageIndex = Math.floor(topRowIndex / pageSize)\n\n    return {\n      ...state,\n      pageIndex,\n      pageSize,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    rows,\n    autoResetPage = true,\n    manualExpandedKey = 'expanded',\n    plugins,\n    pageCount: userPageCount,\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    state: {\n      pageSize,\n      pageIndex,\n      expanded,\n      globalFilter,\n      filters,\n      groupBy,\n      sortBy,\n    },\n    dispatch,\n    data,\n    manualPagination,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useGlobalFilter', 'useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'],\n    'usePagination'\n  )\n\n  const getAutoResetPage = useGetLatest(autoResetPage)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPage()) {\n      dispatch({ type: actions.resetPage })\n    }\n  }, [\n    dispatch,\n    manualPagination ? null : data,\n    globalFilter,\n    filters,\n    groupBy,\n    sortBy,\n  ])\n\n  const pageCount = manualPagination\n    ? userPageCount\n    : Math.ceil(rows.length / pageSize)\n\n  const pageOptions = React.useMemo(\n    () =>\n      pageCount > 0\n        ? [...new Array(pageCount)].fill(null).map((d, i) => i)\n        : [],\n    [pageCount]\n  )\n\n  const page = React.useMemo(() => {\n    let page\n\n    if (manualPagination) {\n      page = rows\n    } else {\n      const pageStart = pageSize * pageIndex\n      const pageEnd = pageStart + pageSize\n\n      page = rows.slice(pageStart, pageEnd)\n    }\n\n    if (paginateExpandedRows) {\n      return page\n    }\n\n    return expandRows(page, { manualExpandedKey, expanded, expandSubRows })\n  }, [\n    expandSubRows,\n    expanded,\n    manualExpandedKey,\n    manualPagination,\n    pageIndex,\n    pageSize,\n    paginateExpandedRows,\n    rows,\n  ])\n\n  const canPreviousPage = pageIndex > 0\n  const canNextPage =\n    pageCount === -1 ? page.length >= pageSize : pageIndex < pageCount - 1\n\n  const gotoPage = React.useCallback(\n    pageIndex => {\n      dispatch({ type: actions.gotoPage, pageIndex })\n    },\n    [dispatch]\n  )\n\n  const previousPage = React.useCallback(() => {\n    return gotoPage(old => old - 1)\n  }, [gotoPage])\n\n  const nextPage = React.useCallback(() => {\n    return gotoPage(old => old + 1)\n  }, [gotoPage])\n\n  const setPageSize = React.useCallback(\n    pageSize => {\n      dispatch({ type: actions.setPageSize, pageSize })\n    },\n    [dispatch]\n  )\n\n  Object.assign(instance, {\n    pageOptions,\n    pageCount,\n    page,\n    canPreviousPage,\n    canNextPage,\n    gotoPage,\n    previousPage,\n    nextPage,\n    setPageSize,\n  })\n}\n","/* istanbul ignore file */\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { flattenColumns, getFirstDefined } from '../utils'\n\n// Actions\nactions.resetPivot = 'resetPivot'\nactions.togglePivot = 'togglePivot'\n\nexport const _UNSTABLE_usePivotColumns = hooks => {\n  hooks.getPivotToggleProps = [defaultGetPivotToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceAfterData.push(useInstanceAfterData)\n  hooks.allColumns.push(allColumns)\n  hooks.accessValue.push(accessValue)\n  hooks.materializedColumns.push(materializedColumns)\n  hooks.materializedColumnsDeps.push(materializedColumnsDeps)\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.visibleColumnsDeps.push(visibleColumnsDeps)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\n_UNSTABLE_usePivotColumns.pluginName = 'usePivotColumns'\n\nconst defaultPivotColumns = []\n\nconst defaultGetPivotToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canPivot\n      ? e => {\n          e.persist()\n          header.togglePivot()\n        }\n      : undefined,\n    style: {\n      cursor: header.canPivot ? 'pointer' : undefined,\n    },\n    title: 'Toggle Pivot',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pivotColumns: defaultPivotColumns,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPivot) {\n    return {\n      ...state,\n      pivotColumns: instance.initialState.pivotColumns || defaultPivotColumns,\n    }\n  }\n\n  if (action.type === actions.togglePivot) {\n    const { columnId, value: setPivot } = action\n\n    const resolvedPivot =\n      typeof setPivot !== 'undefined'\n        ? setPivot\n        : !state.pivotColumns.includes(columnId)\n\n    if (resolvedPivot) {\n      return {\n        ...state,\n        pivotColumns: [...state.pivotColumns, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      pivotColumns: state.pivotColumns.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction useInstanceAfterData(instance) {\n  instance.allColumns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n  })\n}\n\nfunction allColumns(columns, { instance }) {\n  columns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n    column.uniqueValues = new Set()\n  })\n  return columns\n}\n\nfunction accessValue(value, { column }) {\n  if (column.uniqueValues && typeof value !== 'undefined') {\n    column.uniqueValues.add(value)\n  }\n  return value\n}\n\nfunction materializedColumns(materialized, { instance }) {\n  const { allColumns, state } = instance\n\n  if (!state.pivotColumns.length || !state.groupBy || !state.groupBy.length) {\n    return materialized\n  }\n\n  const pivotColumns = state.pivotColumns\n    .map(id => allColumns.find(d => d.id === id))\n    .filter(Boolean)\n\n  const sourceColumns = allColumns.filter(\n    d =>\n      !d.isPivotSource &&\n      !state.groupBy.includes(d.id) &&\n      !state.pivotColumns.includes(d.id)\n  )\n\n  const buildPivotColumns = (depth = 0, parent, pivotFilters = []) => {\n    const pivotColumn = pivotColumns[depth]\n\n    if (!pivotColumn) {\n      return sourceColumns.map(sourceColumn => {\n        // TODO: We could offer support here for renesting pivoted\n        // columns inside copies of their header groups. For now,\n        // that seems like it would be (1) overkill on nesting, considering\n        // you already get nesting for every pivot level and (2)\n        // really hard. :)\n\n        return {\n          ...sourceColumn,\n          canPivot: false,\n          isPivoted: true,\n          parent,\n          depth: depth,\n          id: `${parent ? `${parent.id}.${sourceColumn.id}` : sourceColumn.id}`,\n          accessor: (originalRow, i, row) => {\n            if (pivotFilters.every(filter => filter(row))) {\n              return row.values[sourceColumn.id]\n            }\n          },\n        }\n      })\n    }\n\n    const uniqueValues = Array.from(pivotColumn.uniqueValues).sort()\n\n    return uniqueValues.map(uniqueValue => {\n      const columnGroup = {\n        ...pivotColumn,\n        Header:\n          pivotColumn.PivotHeader || typeof pivotColumn.header === 'string'\n            ? `${pivotColumn.Header}: ${uniqueValue}`\n            : uniqueValue,\n        isPivotGroup: true,\n        parent,\n        depth,\n        id: parent\n          ? `${parent.id}.${pivotColumn.id}.${uniqueValue}`\n          : `${pivotColumn.id}.${uniqueValue}`,\n        pivotValue: uniqueValue,\n      }\n\n      columnGroup.columns = buildPivotColumns(depth + 1, columnGroup, [\n        ...pivotFilters,\n        row => row.values[pivotColumn.id] === uniqueValue,\n      ])\n\n      return columnGroup\n    })\n  }\n\n  const newMaterialized = flattenColumns(buildPivotColumns())\n\n  return [...materialized, ...newMaterialized]\n}\n\nfunction materializedColumnsDeps(\n  deps,\n  {\n    instance: {\n      state: { pivotColumns, groupBy },\n    },\n  }\n) {\n  return [...deps, pivotColumns, groupBy]\n}\n\nfunction visibleColumns(visibleColumns, { instance: { state } }) {\n  visibleColumns = visibleColumns.filter(d => !d.isPivotSource)\n\n  if (state.pivotColumns.length && state.groupBy && state.groupBy.length) {\n    visibleColumns = visibleColumns.filter(\n      column => column.isGrouped || column.isPivoted\n    )\n  }\n\n  return visibleColumns\n}\n\nfunction visibleColumnsDeps(deps, { instance }) {\n  return [...deps, instance.state.pivotColumns, instance.state.groupBy]\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    allColumns,\n    flatHeaders,\n    // pivotFn = defaultPivotFn,\n    // manualPivot,\n    getHooks,\n    plugins,\n    dispatch,\n    autoResetPivot = true,\n    manaulPivot,\n    disablePivot,\n    defaultCanPivot,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useGroupBy'], 'usePivotColumns')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultPivot: defaultColumnPivot,\n      disablePivot: columnDisablePivot,\n    } = column\n\n    column.canPivot = accessor\n      ? getFirstDefined(\n          column.canPivot,\n          columnDisablePivot === true ? false : undefined,\n          disablePivot === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canPivot,\n          defaultColumnPivot,\n          defaultCanPivot,\n          false\n        )\n\n    if (column.canPivot) {\n      column.togglePivot = () => instance.togglePivot(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const togglePivot = (columnId, value) => {\n    dispatch({ type: actions.togglePivot, columnId, value })\n  }\n\n  flatHeaders.forEach(header => {\n    header.getPivotToggleProps = makePropGetter(\n      getHooks().getPivotToggleProps,\n      {\n        instance: getInstance(),\n        header,\n      }\n    )\n  })\n\n  const getAutoResetPivot = useGetLatest(autoResetPivot)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPivot()) {\n      dispatch({ type: actions.resetPivot })\n    }\n  }, [dispatch, manaulPivot ? null : columns])\n\n  Object.assign(instance, {\n    togglePivot,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the pivotColumns and the pivot cell for the row\n    cell.isPivoted = cell.column.isPivoted\n  })\n}\n","import React from 'react'\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nconst pluginName = 'useRowSelect'\n\n// Actions\nactions.resetSelectedRows = 'resetSelectedRows'\nactions.toggleAllRowsSelected = 'toggleAllRowsSelected'\nactions.toggleRowSelected = 'toggleRowSelected'\nactions.toggleAllPageRowsSelected = 'toggleAllPageRowsSelected'\n\nexport const useRowSelect = hooks => {\n  hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps]\n  hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps]\n  hooks.getToggleAllPageRowsSelectedProps = [\n    defaultGetToggleAllPageRowsSelectedProps,\n  ]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowSelect.pluginName = pluginName\n\nconst defaultGetToggleRowSelectedProps = (props, { instance, row }) => {\n  const { manualRowSelectedKey = 'isSelected' } = instance\n  let checked = false\n\n  if (row.original && row.original[manualRowSelectedKey]) {\n    checked = true\n  } else {\n    checked = row.isSelected\n  }\n\n  return [\n    props,\n    {\n      onChange: e => {\n        row.toggleRowSelected(e.target.checked)\n      },\n      style: {\n        cursor: 'pointer',\n      },\n      checked,\n      title: 'Toggle Row Selected',\n      indeterminate: row.isSomeSelected,\n    },\n  ]\n}\n\nconst defaultGetToggleAllRowsSelectedProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleAllRowsSelected(e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: instance.isAllRowsSelected,\n    title: 'Toggle All Rows Selected',\n    indeterminate: Boolean(\n      !instance.isAllRowsSelected &&\n        Object.keys(instance.state.selectedRowIds).length\n    ),\n  },\n]\n\nconst defaultGetToggleAllPageRowsSelectedProps = (props, { instance }) => [\n  props,\n  {\n    onChange(e) {\n      instance.toggleAllPageRowsSelected(e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: instance.isAllPageRowsSelected,\n    title: 'Toggle All Current Page Rows Selected',\n    indeterminate: Boolean(\n      !instance.isAllPageRowsSelected &&\n        instance.page.some(({ id }) => instance.state.selectedRowIds[id])\n    ),\n  },\n]\n\n// eslint-disable-next-line max-params\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      selectedRowIds: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSelectedRows) {\n    return {\n      ...state,\n      selectedRowIds: instance.initialState.selectedRowIds || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsSelected) {\n    const { value: setSelected } = action\n    const {\n      isAllRowsSelected,\n      rowsById,\n      nonGroupedRowsById = rowsById,\n    } = instance\n\n    const selectAll =\n      typeof setSelected !== 'undefined' ? setSelected : !isAllRowsSelected\n\n    // Only remove/add the rows that are visible on the screen\n    //  Leave all the other rows that are selected alone.\n    const selectedRowIds = Object.assign({}, state.selectedRowIds)\n\n    if (selectAll) {\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        selectedRowIds[rowId] = true\n      })\n    } else {\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        delete selectedRowIds[rowId]\n      })\n    }\n\n    return {\n      ...state,\n      selectedRowIds,\n    }\n  }\n\n  if (action.type === actions.toggleRowSelected) {\n    const { id, value: setSelected } = action\n    const { rowsById, selectSubRows = true, getSubRows } = instance\n    const isSelected = state.selectedRowIds[id]\n    const shouldExist =\n      typeof setSelected !== 'undefined' ? setSelected : !isSelected\n\n    if (isSelected === shouldExist) {\n      return state\n    }\n\n    const newSelectedRowIds = { ...state.selectedRowIds }\n\n    const handleRowById = id => {\n      const row = rowsById[id]\n\n      if (row) {\n        if (!row.isGrouped) {\n          if (shouldExist) {\n            newSelectedRowIds[id] = true\n          } else {\n            delete newSelectedRowIds[id]\n          }\n        }\n\n        if (selectSubRows && getSubRows(row)) {\n          return getSubRows(row).forEach(row => handleRowById(row.id))\n        }\n      }\n    }\n\n    handleRowById(id)\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    }\n  }\n\n  if (action.type === actions.toggleAllPageRowsSelected) {\n    const { value: setSelected } = action\n    const {\n      page,\n      rowsById,\n      selectSubRows = true,\n      isAllPageRowsSelected,\n      getSubRows,\n    } = instance\n\n    const selectAll =\n      typeof setSelected !== 'undefined' ? setSelected : !isAllPageRowsSelected\n\n    const newSelectedRowIds = { ...state.selectedRowIds }\n\n    const handleRowById = id => {\n      const row = rowsById[id]\n\n      if (!row.isGrouped) {\n        if (selectAll) {\n          newSelectedRowIds[id] = true\n        } else {\n          delete newSelectedRowIds[id]\n        }\n      }\n\n      if (selectSubRows && getSubRows(row)) {\n        return getSubRows(row).forEach(row => handleRowById(row.id))\n      }\n    }\n\n    page.forEach(row => handleRowById(row.id))\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    }\n  }\n  return state\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    getHooks,\n    plugins,\n    rowsById,\n    nonGroupedRowsById = rowsById,\n    autoResetSelectedRows = true,\n    state: { selectedRowIds },\n    selectSubRows = true,\n    dispatch,\n    page,\n    getSubRows,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGroupBy', 'useSortBy', 'useExpanded', 'usePagination'],\n    'useRowSelect'\n  )\n\n  const selectedFlatRows = React.useMemo(() => {\n    const selectedFlatRows = []\n\n    rows.forEach(row => {\n      const isSelected = selectSubRows\n        ? getRowIsSelected(row, selectedRowIds, getSubRows)\n        : !!selectedRowIds[row.id]\n      row.isSelected = !!isSelected\n      row.isSomeSelected = isSelected === null\n\n      if (isSelected) {\n        selectedFlatRows.push(row)\n      }\n    })\n\n    return selectedFlatRows\n  }, [rows, selectSubRows, selectedRowIds, getSubRows])\n\n  let isAllRowsSelected = Boolean(\n    Object.keys(nonGroupedRowsById).length && Object.keys(selectedRowIds).length\n  )\n\n  let isAllPageRowsSelected = isAllRowsSelected\n\n  if (isAllRowsSelected) {\n    if (Object.keys(nonGroupedRowsById).some(id => !selectedRowIds[id])) {\n      isAllRowsSelected = false\n    }\n  }\n\n  if (!isAllRowsSelected) {\n    if (page && page.length && page.some(({ id }) => !selectedRowIds[id])) {\n      isAllPageRowsSelected = false\n    }\n  }\n\n  const getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSelectedRows()) {\n      dispatch({ type: actions.resetSelectedRows })\n    }\n  }, [dispatch, data])\n\n  const toggleAllRowsSelected = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsSelected, value }),\n    [dispatch]\n  )\n\n  const toggleAllPageRowsSelected = React.useCallback(\n    value => dispatch({ type: actions.toggleAllPageRowsSelected, value }),\n    [dispatch]\n  )\n\n  const toggleRowSelected = React.useCallback(\n    (id, value) => dispatch({ type: actions.toggleRowSelected, id, value }),\n    [dispatch]\n  )\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsSelectedProps = makePropGetter(\n    getHooks().getToggleAllRowsSelectedProps,\n    { instance: getInstance() }\n  )\n\n  const getToggleAllPageRowsSelectedProps = makePropGetter(\n    getHooks().getToggleAllPageRowsSelectedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    selectedFlatRows,\n    isAllRowsSelected,\n    isAllPageRowsSelected,\n    toggleRowSelected,\n    toggleAllRowsSelected,\n    getToggleAllRowsSelectedProps,\n    getToggleAllPageRowsSelectedProps,\n    toggleAllPageRowsSelected,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  row.toggleRowSelected = set => instance.toggleRowSelected(row.id, set)\n\n  row.getToggleRowSelectedProps = makePropGetter(\n    instance.getHooks().getToggleRowSelectedProps,\n    { instance: instance, row }\n  )\n}\n\nfunction getRowIsSelected(row, selectedRowIds, getSubRows) {\n  if (selectedRowIds[row.id]) {\n    return true\n  }\n\n  const subRows = getSubRows(row)\n\n  if (subRows && subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (getRowIsSelected(subRow, selectedRowIds, getSubRows)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n    return allChildrenSelected ? true : someSelected ? null : false\n  }\n\n  return false\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst defaultInitialRowStateAccessor = row => ({})\nconst defaultInitialCellStateAccessor = cell => ({})\n\n// Actions\nactions.setRowState = 'setRowState'\nactions.setCellState = 'setCellState'\nactions.resetRowState = 'resetRowState'\n\nexport const useRowState = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowState.pluginName = 'useRowState'\n\nfunction reducer(state, action, previousState, instance) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    rowsById,\n  } = instance\n\n  if (action.type === actions.init) {\n    return {\n      rowState: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetRowState) {\n    return {\n      ...state,\n      rowState: instance.initialState.rowState || {},\n    }\n  }\n\n  if (action.type === actions.setRowState) {\n    const { rowId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId])\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: functionalUpdate(value, oldRowState),\n      },\n    }\n  }\n\n  if (action.type === actions.setCellState) {\n    const { rowId, columnId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId])\n\n    const oldCellState =\n      typeof oldRowState?.cellState?.[columnId] !== 'undefined'\n        ? oldRowState.cellState[columnId]\n        : initialCellStateAccessor(\n            rowsById[rowId]?.cells?.find(cell => cell.column.id === columnId)\n          )\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: {\n          ...oldRowState,\n          cellState: {\n            ...(oldRowState.cellState || {}),\n            [columnId]: functionalUpdate(value, oldCellState),\n          },\n        },\n      },\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const { autoResetRowState = true, data, dispatch } = instance\n\n  const setRowState = React.useCallback(\n    (rowId, value) =>\n      dispatch({\n        type: actions.setRowState,\n        rowId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const setCellState = React.useCallback(\n    (rowId, columnId, value) =>\n      dispatch({\n        type: actions.setCellState,\n        rowId,\n        columnId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const getAutoResetRowState = useGetLatest(autoResetRowState)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetRowState()) {\n      dispatch({ type: actions.resetRowState })\n    }\n  }, [data])\n\n  Object.assign(instance, {\n    setRowState,\n    setCellState,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    state: { rowState },\n  } = instance\n\n  if (row) {\n    row.state =\n      typeof rowState[row.id] !== 'undefined'\n        ? rowState[row.id]\n        : initialRowStateAccessor(row)\n\n    row.setState = updater => {\n      return instance.setRowState(row.id, updater)\n    }\n\n    row.cells.forEach(cell => {\n      if (!row.state.cellState) {\n        row.state.cellState = {}\n      }\n\n      cell.state =\n        typeof row.state.cellState[cell.column.id] !== 'undefined'\n          ? row.state.cellState[cell.column.id]\n          : initialCellStateAccessor(cell)\n\n      cell.setState = updater => {\n        return instance.setCellState(row.id, cell.column.id, updater)\n      }\n    })\n  }\n}\n","import React from 'react'\n\nimport { functionalUpdate, actions } from '../publicUtils'\n\n// Actions\nactions.resetColumnOrder = 'resetColumnOrder'\nactions.setColumnOrder = 'setColumnOrder'\n\nexport const useColumnOrder = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => {\n    return [...deps, instance.state.columnOrder]\n  })\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnOrder.pluginName = 'useColumnOrder'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetColumnOrder) {\n    return {\n      ...state,\n      columnOrder: instance.initialState.columnOrder || [],\n    }\n  }\n\n  if (action.type === actions.setColumnOrder) {\n    return {\n      ...state,\n      columnOrder: functionalUpdate(action.columnOrder, state.columnOrder),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { columnOrder },\n    },\n  }\n) {\n  // If there is no order, return the normal columns\n  if (!columnOrder || !columnOrder.length) {\n    return columns\n  }\n\n  const columnOrderCopy = [...columnOrder]\n\n  // If there is an order, make a copy of the columns\n  const columnsCopy = [...columns]\n\n  // And make a new ordered array of the columns\n  const columnsInOrder = []\n\n  // Loop over the columns and place them in order into the new array\n  while (columnsCopy.length && columnOrderCopy.length) {\n    const targetColumnId = columnOrderCopy.shift()\n    const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId)\n    if (foundIndex > -1) {\n      columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0])\n    }\n  }\n\n  // If there are any columns left, add them to the end\n  return [...columnsInOrder, ...columnsCopy]\n}\n\nfunction useInstance(instance) {\n  const { dispatch } = instance\n\n  instance.setColumnOrder = React.useCallback(\n    columnOrder => {\n      return dispatch({ type: actions.setColumnOrder, columnOrder })\n    },\n    [dispatch]\n  )\n}\n","import React from 'react'\n\nimport {\n  actions,\n  defaultColumn,\n  makePropGetter,\n  useGetLatest,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport { getFirstDefined, passiveEventSupported } from '../utils'\n\n// Default Column\ndefaultColumn.canResize = true\n\n// Actions\nactions.columnStartResizing = 'columnStartResizing'\nactions.columnResizing = 'columnResizing'\nactions.columnDoneResizing = 'columnDoneResizing'\nactions.resetResize = 'resetResize'\n\nexport const useResizeColumns = hooks => {\n  hooks.getResizerProps = [defaultGetResizerProps]\n  hooks.getHeaderProps.push({\n    style: {\n      position: 'relative',\n    },\n  })\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n}\n\nconst defaultGetResizerProps = (props, { instance, header }) => {\n  const { dispatch } = instance\n\n  const onResizeStart = (e, header) => {\n    let isTouchEvent = false\n    if (e.type === 'touchstart') {\n      // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n      if (e.touches && e.touches.length > 1) {\n        return\n      }\n      isTouchEvent = true\n    }\n    const headersToResize = getLeafHeaders(header)\n    const headerIdWidths = headersToResize.map(d => [d.id, d.totalWidth])\n\n    const clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX\n\n    let raf\n    let mostRecentClientX\n\n    const dispatchEnd = () => {\n      window.cancelAnimationFrame(raf)\n      raf = null\n      dispatch({ type: actions.columnDoneResizing })\n    }\n    const dispatchMove = () => {\n      window.cancelAnimationFrame(raf)\n      raf = null\n      dispatch({ type: actions.columnResizing, clientX: mostRecentClientX })\n    }\n\n    const scheduleDispatchMoveOnNextAnimationFrame = clientXPos => {\n      mostRecentClientX = clientXPos\n      if (!raf) {\n        raf = window.requestAnimationFrame(dispatchMove)\n      }\n    }\n\n    const handlersAndEvents = {\n      mouse: {\n        moveEvent: 'mousemove',\n        moveHandler: e => scheduleDispatchMoveOnNextAnimationFrame(e.clientX),\n        upEvent: 'mouseup',\n        upHandler: e => {\n          document.removeEventListener(\n            'mousemove',\n            handlersAndEvents.mouse.moveHandler\n          )\n          document.removeEventListener(\n            'mouseup',\n            handlersAndEvents.mouse.upHandler\n          )\n          dispatchEnd()\n        },\n      },\n      touch: {\n        moveEvent: 'touchmove',\n        moveHandler: e => {\n          if (e.cancelable) {\n            e.preventDefault()\n            e.stopPropagation()\n          }\n          scheduleDispatchMoveOnNextAnimationFrame(e.touches[0].clientX)\n          return false\n        },\n        upEvent: 'touchend',\n        upHandler: e => {\n          document.removeEventListener(\n            handlersAndEvents.touch.moveEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          document.removeEventListener(\n            handlersAndEvents.touch.upEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          dispatchEnd()\n        },\n      },\n    }\n\n    const events = isTouchEvent\n      ? handlersAndEvents.touch\n      : handlersAndEvents.mouse\n    const passiveIfSupported = passiveEventSupported()\n      ? { passive: false }\n      : false\n    document.addEventListener(\n      events.moveEvent,\n      events.moveHandler,\n      passiveIfSupported\n    )\n    document.addEventListener(\n      events.upEvent,\n      events.upHandler,\n      passiveIfSupported\n    )\n\n    dispatch({\n      type: actions.columnStartResizing,\n      columnId: header.id,\n      columnWidth: header.totalWidth,\n      headerIdWidths,\n      clientX,\n    })\n  }\n\n  return [\n    props,\n    {\n      onMouseDown: e => e.persist() || onResizeStart(e, header),\n      onTouchStart: e => e.persist() || onResizeStart(e, header),\n      style: {\n        cursor: 'col-resize',\n      },\n      draggable: false,\n      role: 'separator',\n    },\n  ]\n}\n\nuseResizeColumns.pluginName = 'useResizeColumns'\n\nfunction reducer(state, action) {\n  if (action.type === actions.init) {\n    return {\n      columnResizing: {\n        columnWidths: {},\n      },\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetResize) {\n    return {\n      ...state,\n      columnResizing: {\n        columnWidths: {},\n      },\n    }\n  }\n\n  if (action.type === actions.columnStartResizing) {\n    const { clientX, columnId, columnWidth, headerIdWidths } = action\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: clientX,\n        headerIdWidths,\n        columnWidth,\n        isResizingColumn: columnId,\n      },\n    }\n  }\n\n  if (action.type === actions.columnResizing) {\n    const { clientX } = action\n    const { startX, columnWidth, headerIdWidths = [] } = state.columnResizing\n\n    const deltaX = clientX - startX\n    const percentageDeltaX = deltaX / columnWidth\n\n    const newColumnWidths = {}\n\n    headerIdWidths.forEach(([headerId, headerWidth]) => {\n      newColumnWidths[headerId] = Math.max(\n        headerWidth + headerWidth * percentageDeltaX,\n        0\n      )\n    })\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        columnWidths: {\n          ...state.columnResizing.columnWidths,\n          ...newColumnWidths,\n        },\n      },\n    }\n  }\n\n  if (action.type === actions.columnDoneResizing) {\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: null,\n        isResizingColumn: null,\n      },\n    }\n  }\n}\n\nconst useInstanceBeforeDimensions = instance => {\n  const {\n    flatHeaders,\n    disableResizing,\n    getHooks,\n    state: { columnResizing },\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  flatHeaders.forEach(header => {\n    const canResize = getFirstDefined(\n      header.disableResizing === true ? false : undefined,\n      disableResizing === true ? false : undefined,\n      true\n    )\n\n    header.canResize = canResize\n    header.width =\n      columnResizing.columnWidths[header.id] ||\n      header.originalWidth ||\n      header.width\n    header.isResizing = columnResizing.isResizingColumn === header.id\n\n    if (canResize) {\n      header.getResizerProps = makePropGetter(getHooks().getResizerProps, {\n        instance: getInstance(),\n        header,\n      })\n    }\n  })\n}\n\nfunction useInstance(instance) {\n  const { plugins, dispatch, autoResetResize = true, columns } = instance\n\n  ensurePluginOrder(plugins, ['useAbsoluteLayout'], 'useResizeColumns')\n\n  const getAutoResetResize = useGetLatest(autoResetResize)\n  useMountedLayoutEffect(() => {\n    if (getAutoResetResize()) {\n      dispatch({ type: actions.resetResize })\n    }\n  }, [columns])\n\n  const resetResizing = React.useCallback(\n    () => dispatch({ type: actions.resetResize }),\n    [dispatch]\n  )\n\n  Object.assign(instance, {\n    resetResizing,\n  })\n}\n\nfunction getLeafHeaders(header) {\n  const leafHeaders = []\n  const recurseHeader = header => {\n    if (header.columns && header.columns.length) {\n      header.columns.map(recurseHeader)\n    }\n    leafHeaders.push(header)\n  }\n  recurseHeader(header)\n  return leafHeaders\n}\n","const cellStyles = {\n  position: 'absolute',\n  top: 0,\n}\n\nexport const useAbsoluteLayout = hooks => {\n  hooks.getTableBodyProps.push(getRowStyles)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${column.totalLeft}px`,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${cell.column.totalLeft}px`,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getFooterProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${column.totalLeft}px`,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseAbsoluteLayout.pluginName = 'useAbsoluteLayout'\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      position: 'relative',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n","const cellStyles = {\n  display: 'inline-block',\n  boxSizing: 'border-box',\n}\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n\nexport const useBlockLayout = hooks => {\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getFooterProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseBlockLayout.pluginName = 'useBlockLayout'\n","export function useFlexLayout(hooks) {\n  hooks.getTableProps.push(getTableProps)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n  hooks.getHeaderProps.push(getHeaderProps)\n  hooks.getCellProps.push(getCellProps)\n  hooks.getFooterProps.push(getFooterProps)\n}\n\nuseFlexLayout.pluginName = 'useFlexLayout'\n\nconst getTableProps = (props, { instance }) => [\n  props,\n  {\n    style: {\n      minWidth: `${instance.totalColumnsMinWidth}px`,\n    },\n  },\n]\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      flex: '1 0 auto',\n      minWidth: `${instance.totalColumnsMinWidth}px`,\n    },\n  },\n]\n\nconst getHeaderProps = (props, { column }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: column.totalFlexWidth\n        ? `${column.totalFlexWidth} 0 auto`\n        : undefined,\n      minWidth: `${column.totalMinWidth}px`,\n      width: `${column.totalWidth}px`,\n    },\n  },\n]\n\nconst getCellProps = (props, { cell }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: `${cell.column.totalFlexWidth} 0 auto`,\n      minWidth: `${cell.column.totalMinWidth}px`,\n      width: `${cell.column.totalWidth}px`,\n    },\n  },\n]\n\nconst getFooterProps = (props, { column }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: column.totalFlexWidth\n        ? `${column.totalFlexWidth} 0 auto`\n        : undefined,\n      minWidth: `${column.totalMinWidth}px`,\n      width: `${column.totalWidth}px`,\n    },\n  },\n]\n","import { actions } from '../publicUtils'\n\n// Actions\nactions.columnStartResizing = 'columnStartResizing'\nactions.columnResizing = 'columnResizing'\nactions.columnDoneResizing = 'columnDoneResizing'\nactions.resetResize = 'resetResize'\n\nexport function useGridLayout(hooks) {\n  hooks.stateReducers.push(reducer)\n  hooks.getTableProps.push(getTableProps)\n  hooks.getHeaderProps.push(getHeaderProps)\n  hooks.getRowProps.push(getRowProps)\n}\n\nuseGridLayout.pluginName = 'useGridLayout'\n\nconst getTableProps = (props, { instance }) => {\n  const gridTemplateColumns = instance.visibleColumns.map(column => {\n    if (instance.state.gridLayout.columnWidths[column.id])\n      return `${instance.state.gridLayout.columnWidths[column.id]}px`\n    // When resizing, lock the width of all unset columns\n    // instead of using user-provided width or defaultColumn width,\n    // which could potentially be 'auto' or 'fr' units that don't scale linearly\n    if (instance.state.columnResizing?.isResizingColumn)\n      return `${instance.state.gridLayout.startWidths[column.id]}px`\n    if (typeof column.width === 'number') return `${column.width}px`\n    return column.width\n  })\n  return [\n    props,\n    {\n      style: {\n        display: `grid`,\n        gridTemplateColumns: gridTemplateColumns.join(` `),\n      },\n    },\n  ]\n}\n\nconst getHeaderProps = (props, { column }) => [\n  props,\n  {\n    id: `header-cell-${column.id}`,\n    style: {\n      position: `sticky`, //enables a scroll wrapper to be placed around the table and have sticky headers\n      gridColumn: `span ${column.totalVisibleHeaderCount}`,\n    },\n  },\n]\n\nconst getRowProps = (props, { row }) => {\n  if (row.isExpanded) {\n    return [\n      props,\n      {\n        style: {\n          gridColumn: `1 / ${row.cells.length + 1}`,\n        },\n      },\n    ]\n  }\n  return [props, {}]\n}\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      gridLayout: {\n        columnWidths: {},\n      },\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetResize) {\n    return {\n      ...state,\n      gridLayout: {\n        columnWidths: {},\n      },\n    }\n  }\n\n  if (action.type === actions.columnStartResizing) {\n    const { columnId, headerIdWidths } = action\n    const columnWidth = getElementWidth(columnId)\n\n    if (columnWidth !== undefined) {\n      const startWidths = instance.visibleColumns.reduce(\n        (acc, column) => ({\n          ...acc,\n          [column.id]: getElementWidth(column.id),\n        }),\n        {}\n      )\n      const minWidths = instance.visibleColumns.reduce(\n        (acc, column) => ({\n          ...acc,\n          [column.id]: column.minWidth,\n        }),\n        {}\n      )\n      const maxWidths = instance.visibleColumns.reduce(\n        (acc, column) => ({\n          ...acc,\n          [column.id]: column.maxWidth,\n        }),\n        {}\n      )\n\n      const headerIdGridWidths = headerIdWidths.map(([headerId]) => [\n        headerId,\n        getElementWidth(headerId),\n      ])\n\n      return {\n        ...state,\n        gridLayout: {\n          ...state.gridLayout,\n          startWidths,\n          minWidths,\n          maxWidths,\n          headerIdGridWidths,\n          columnWidth,\n        },\n      }\n    } else {\n      return state\n    }\n  }\n\n  if (action.type === actions.columnResizing) {\n    const { clientX } = action\n    const { startX } = state.columnResizing\n    const {\n      columnWidth,\n      minWidths,\n      maxWidths,\n      headerIdGridWidths = [],\n    } = state.gridLayout\n\n    const deltaX = clientX - startX\n    const percentageDeltaX = deltaX / columnWidth\n\n    const newColumnWidths = {}\n\n    headerIdGridWidths.forEach(([headerId, headerWidth]) => {\n      newColumnWidths[headerId] = Math.min(\n        Math.max(\n          minWidths[headerId],\n          headerWidth + headerWidth * percentageDeltaX\n        ),\n        maxWidths[headerId]\n      )\n    })\n\n    return {\n      ...state,\n      gridLayout: {\n        ...state.gridLayout,\n        columnWidths: {\n          ...state.gridLayout.columnWidths,\n          ...newColumnWidths,\n        },\n      },\n    }\n  }\n\n  if (action.type === actions.columnDoneResizing) {\n    return {\n      ...state,\n      gridLayout: {\n        ...state.gridLayout,\n        startWidths: {},\n        minWidths: {},\n        maxWidths: {},\n      },\n    }\n  }\n}\n\nfunction getElementWidth(columnId) {\n  const width = document.getElementById(`header-cell-${columnId}`)?.offsetWidth\n\n  if (width !== undefined) {\n    return width\n  }\n}\n","if (process.env.NODE_ENV === 'production') {\n  module.exports = require('./dist/react-table.production.min.js')\n} else {\n  module.exports = require('./dist/react-table.development.js')\n}\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["actions","init","defaultRenderer","value","t","emptyRenderer","React","defaultColumn","Cell","width","minWidth","maxWidth","Number","MAX_SAFE_INTEGER","mergeProps","propList","reduce","props","next","style","className","makePropGetter","hooks","meta","userProps","prev","handlePropGetter","prevProps","Array","isArray","reduceHooks","initial","allowUndefined","loopHooks","context","forEach","hook","ensurePluginOrder","plugins","befores","pluginName","afters","findIndex","plugin","before","functionalUpdate","updater","old","useGetLatest","obj","ref","useRef","current","useCallback","safeUseLayoutEffect","document","useLayoutEffect","useEffect","useMountedLayoutEffect","fn","deps","mountedRef","makeRenderer","instance","column","type","Comp","console","info","Error","flexRender","component","proto","Object","getPrototypeOf","prototype","isReactComponent","$$typeof","includes","description","linkColumnStructure","columns","parent","depth","map","assignColumnAccessor","flattenColumns","flattenBy","id","accessor","Header","accessorPath","split","row","path","def","val","cacheKey","JSON","stringify","pathObj","pathObjCache","get","flattenDeep","arr","newArr","i","length","push","d","String","replace","join","reOpenBracket","reCloseBracket","set","cursor","pathPart","e","error","assign","decorateColumn","userDefaultColumn","Footer","originalWidth","makeHeaderGroups","allColumns","additionalHeaderProperties","headerGroups","scanColumns","uid","getUID","headerGroup","headers","parentColumns","hasParents","some","newParent","latestParentColumn","reverse","originalId","placeholderOf","Map","getFirstDefined","args","isFunction","a","key","flat","recurse","expandRows","rows","manualExpandedKey","expanded","expandSubRows","expandedRows","handleRow","addToExpandedRows","isExpanded","original","canExpand","subRows","getFilterMethod","filter","userFilterTypes","filterTypes","text","shouldAutoRemoveFilter","autoRemove","unpreparedAccessWarning","passiveSupported","defaultGetTableProps","role","defaultGetTableBodyProps","defaultGetHeaderProps","colSpan","totalVisibleHeaderCount","defaultGetFooterProps","defaultGetHeaderGroupProps","index","defaultGetFooterGroupProps","defaultGetRowProps","defaultGetCellProps","cell","makeDefaultPluginHooks","useOptions","stateReducers","useControlledState","columnsDeps","allColumnsDeps","accessValue","materializedColumns","materializedColumnsDeps","useInstanceAfterData","visibleColumns","visibleColumnsDeps","headerGroupsDeps","useInstanceBeforeDimensions","useInstance","prepareRow","getTableProps","getTableBodyProps","getHeaderGroupProps","getFooterGroupProps","getHeaderProps","getFooterProps","getRowProps","getCellProps","useFinalInstance","resetHiddenColumns","toggleHideColumn","setHiddenColumns","toggleHideAllColumns","useColumnVisibility","getToggleHiddenProps","defaultGetToggleHiddenProps","getToggleHideAllColumnsProps","defaultGetToggleHideAllColumnsProps","reducer","state","hiddenColumns","onChange","toggleHidden","target","checked","isVisible","title","allColumnsHidden","indeterminate","action","previousState","initialState","columnId","subHeader","handleColumn","parentVisible","subColumn","flatHeaders","dispatch","getHooks","autoResetHiddenColumns","getInstance","getAutoResetHiddenColumns","defaultInitialState","defaultColumnInstance","defaultReducer","prevState","defaultGetSubRows","defaultGetRowId","defaultUseControlledState","applyDefaults","getSubRows","getRowId","stateReducer","calculateHeaderWidths","left","sumTotalMinWidth","sumTotalWidth","sumTotalMaxWidth","sumTotalFlexWidth","header","subHeaders","totalLeft","totalMinWidth","totalWidth","totalMaxWidth","totalFlexWidth","Math","min","max","canResize","accessRowsForColumn","data","flatRows","rowsById","accessValueHooks","originalRow","rowIndex","accessRow","parentRows","originalSubRows","cells","values","resetExpanded","toggleRowExpanded","toggleAllRowsExpanded","useExpanded","getToggleAllRowsExpandedProps","defaultGetToggleAllRowsExpandedProps","getToggleRowExpandedProps","defaultGetToggleRowExpandedProps","onClick","isAllRowsExpanded","keys","rowId","r","setExpanded","exists","shouldExist","f","s","paginateExpandedRows","autoResetExpanded","getAutoResetExpanded","Boolean","useMemo","expandedDepth","maxDepth","splitId","preExpandedRows","ids","filterValue","rowValue","toLowerCase","exactText","exactTextCase","includesAll","every","includesSome","includesValue","exact","equals","between","Infinity","temp","__proto__","resetFilters","setFilter","setAllFilters","useFilters","filters","find","filterMethod","previousfilter","newFilter","manualFilters","defaultCanFilter","disableFilters","autoResetFilters","columnDefaultCanFilter","columnDisableFilters","canFilter","undefined","found","filteredFlatRows","filteredRowsById","filterRows","filteredRows","filteredSoFar","preFilteredRows","warn","getAutoResetFilters","preFilteredFlatRows","preFilteredRowsById","resetGlobalFilter","setGlobalFilter","useGlobalFilter","globalFilter","manualGlobalFilter","globalFilterValue","autoResetGlobalFilter","disableGlobalFilter","columnDisableGlobalFilter","filterableColumns","c","globalFilteredRows","globalFilteredFlatRows","globalFilteredRowsById","getAutoResetGlobalFilter","preGlobalFilteredRows","preGlobalFilteredFlatRows","preGlobalFilteredRowsById","sum","aggregatedValues","mid","floor","nums","sort","b","unique","from","Set","size","emptyArray","emptyObject","resetGroupBy","setGroupBy","toggleGroupBy","useGroupBy","getGroupByToggleProps","defaultGetGroupByToggleProps","groupBy","canGroupBy","persist","resolvedGroupBy","groupByColumns","g","col","nonGroupByColumns","isGrouped","groupedIndex","indexOf","defaultUserAggregations","groupByFn","defaultGroupByFn","manualGroupBy","aggregations","userAggregations","autoResetGroupBy","disableGroupBy","defaultCanGroupBy","defaultColumnGroupBy","defaultGroupBy","columnDisableGroupBy","Aggregated","existingGroupBy","groupedFlatRows","groupedRowsById","onlyGroupedFlatRows","onlyGroupedRowsById","nonGroupedFlatRows","nonGroupedRowsById","groupedRows","groupUpRecursively","parentId","rowGroupsMap","entries","groupByVal","leafRows","aggregateFn","aggregate","groupedValues","leafValues","columnValue","aggregateValue","aggregateValueFn","groupByID","subRow","getAutoResetGroupBy","preGroupedRows","preGroupedFlatRow","preGroupedRowsById","allCells","isPlaceholder","isAggregated","_row$subRows","resKey","reSplitAlphaNumeric","compareBasic","getRowValuesByColumnID","row1","row2","toString","isNaN","alphanumeric","rowA","rowB","aa","shift","bb","an","parseInt","bn","combo","getTime","alower","blower","replaceNonNumeric","resetSortBy","setSortBy","toggleSortBy","clearSortBy","sortType","sortDescFirst","useSortBy","getSortByToggleProps","defaultGetSortByToggleProps","isMultiSortEvent","shiftKey","canSort","disableMultiSort","sortBy","sortAction","desc","multi","disableSortRemove","disableMultiRemove","maxMultiSortColCount","existingSortBy","existingIndex","hasDescDefined","newSortBy","splice","orderByFn","defaultOrderByFn","userSortTypes","sortTypes","manualSortBy","defaultCanSort","disableSortBy","autoResetSortBy","defaultColumnCanSort","columnDisableSortBy","columnSort","isSorted","sortedIndex","isSortedDesc","sortedFlatRows","availableSortBy","sortData","sortedData","sortMethod","sortInverted","sortedRows","getAutoResetSortBy","preSortedRows","preSortedFlatRows","funcs","dirs","sortFn","sortInt","resetPage","gotoPage","setPageSize","usePagination","pageSize","pageIndex","pageCount","page","newPageIndex","canNavigate","topRowIndex","autoResetPage","userPageCount","manualPagination","getAutoResetPage","ceil","pageOptions","fill","pageStart","pageEnd","slice","canPreviousPage","canNextPage","previousPage","nextPage","resetPivot","togglePivot","_UNSTABLE_usePivotColumns","getPivotToggleProps","defaultGetPivotToggleProps","defaultPivotColumns","canPivot","pivotColumns","setPivot","resolvedPivot","isPivotSource","uniqueValues","add","materialized","sourceColumns","newMaterialized","buildPivotColumns","pivotFilters","pivotColumn","u","uniqueValue","columnGroup","PivotHeader","isPivotGroup","pivotValue","sourceColumn","isPivoted","autoResetPivot","manaulPivot","disablePivot","defaultCanPivot","defaultColumnPivot","defaultPivot","columnDisablePivot","getAutoResetPivot","resetSelectedRows","toggleAllRowsSelected","toggleRowSelected","toggleAllPageRowsSelected","useRowSelect","getToggleRowSelectedProps","defaultGetToggleRowSelectedProps","getToggleAllRowsSelectedProps","defaultGetToggleAllRowsSelectedProps","getToggleAllPageRowsSelectedProps","defaultGetToggleAllPageRowsSelectedProps","manualRowSelectedKey","isSelected","isSomeSelected","isAllRowsSelected","selectedRowIds","isAllPageRowsSelected","setSelected","selectAll","selectSubRows","newSelectedRowIds","handleRowById","autoResetSelectedRows","selectedFlatRows","getRowIsSelected","allChildrenSelected","someSelected","getAutoResetSelectedRows","defaultInitialRowStateAccessor","defaultInitialCellStateAccessor","setRowState","setCellState","resetRowState","useRowState","initialRowStateAccessor","initialCellStateAccessor","rowState","oldRowState","oldCellState","cellState","_rowsById$_rowId","_rowsById$_rowId$cell","w","autoResetRowState","getAutoResetRowState","setState","resetColumnOrder","setColumnOrder","useColumnOrder","columnOrder","columnOrderCopy","columnsCopy","columnsInOrder","targetColumnId","foundIndex","columnStartResizing","columnResizing","columnDoneResizing","resetResize","useResizeColumns","getResizerProps","defaultGetResizerProps","position","onResizeStart","isTouchEvent","touches","raf","mostRecentClientX","headerIdWidths","leafHeaders","recurseHeader","clientX","round","dispatchEnd","window","cancelAnimationFrame","dispatchMove","scheduleDispatchMoveOnNextAnimationFrame","clientXPos","requestAnimationFrame","handlersAndEvents","mouse","moveEvent","moveHandler","upEvent","upHandler","removeEventListener","touch","cancelable","preventDefault","stopPropagation","events","passiveIfSupported","supported","options","addEventListener","err","passive","columnWidth","onMouseDown","onTouchStart","draggable","columnWidths","startX","isResizingColumn","percentageDeltaX","newColumnWidths","headerId","headerWidth","disableResizing","isResizing","autoResetResize","getAutoResetResize","resetResizing","cellStyles","top","useAbsoluteLayout","getRowStyles","totalColumnsWidth","display","boxSizing","useBlockLayout","useFlexLayout","totalColumnsMinWidth","flex","useGridLayout","gridTemplateColumns","gridLayout","_instance$state$colum","startWidths","gridColumn","getElementWidth","acc","minWidths","maxWidths","headerIdGridWidths","getElementById","_document$getElementB","offsetWidth","defaultFn","defaultWait","debounceRef","getDefaultFn","getDefaultWait","promise","Promise","resolve","reject","timeout","clearTimeout","setTimeout","userColumns","getStateReducer","handler","useReducer","reducerState","allColumnsQueue","initialRows","all","visibleColumnsDep","totalColumnsMaxWidth","render","footerGroups","module","exports","nanoid","crypto","getRandomValues","Uint8Array","byte","toUpperCase"],"sourceRoot":""}